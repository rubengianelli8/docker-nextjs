
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model str_user
 */

export type str_user = {
  id: number
  username: string
  password: string
  firts_name: string
  last_name: string
  email: string
  birth_date: Date
}

/**
 * Model str_role
 */

export type str_role = {
  id: number
  name: string
  description: string
}

/**
 * Model str_permission
 */

export type str_permission = {
  id: number
  name: string
  description: string
}

/**
 * Model str_role_x_user
 */

export type str_role_x_user = {
  id: number
  id_role: number
  id_user: number
  created_at: Date
  updated_at: Date
  created_by_id: number
  updated_by_id: number
}

/**
 * Model str_permission_x_role
 */

export type str_permission_x_role = {
  id: number
  id_role: number
  id_permission: number
  created_at: Date
  updated_at: Date
  created_by_id: number
  updated_by_id: number
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Str_users
 * const str_users = await prisma.str_user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Str_users
   * const str_users = await prisma.str_user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;


      /**
   * `prisma.str_user`: Exposes CRUD operations for the **str_user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Str_users
    * const str_users = await prisma.str_user.findMany()
    * ```
    */
  get str_user(): Prisma.str_userDelegate<GlobalReject>;

  /**
   * `prisma.str_role`: Exposes CRUD operations for the **str_role** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Str_roles
    * const str_roles = await prisma.str_role.findMany()
    * ```
    */
  get str_role(): Prisma.str_roleDelegate<GlobalReject>;

  /**
   * `prisma.str_permission`: Exposes CRUD operations for the **str_permission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Str_permissions
    * const str_permissions = await prisma.str_permission.findMany()
    * ```
    */
  get str_permission(): Prisma.str_permissionDelegate<GlobalReject>;

  /**
   * `prisma.str_role_x_user`: Exposes CRUD operations for the **str_role_x_user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Str_role_x_users
    * const str_role_x_users = await prisma.str_role_x_user.findMany()
    * ```
    */
  get str_role_x_user(): Prisma.str_role_x_userDelegate<GlobalReject>;

  /**
   * `prisma.str_permission_x_role`: Exposes CRUD operations for the **str_permission_x_role** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Str_permission_x_roles
    * const str_permission_x_roles = await prisma.str_permission_x_role.findMany()
    * ```
    */
  get str_permission_x_role(): Prisma.str_permission_x_roleDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.4.2
   * Query Engine version: 57771c0558568c7d08bd34c7248af5244ae16bd9
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    str_user: 'str_user',
    str_role: 'str_role',
    str_permission: 'str_permission',
    str_role_x_user: 'str_role_x_user',
    str_permission_x_role: 'str_permission_x_role'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type Str_userCountOutputType
   */


  export type Str_userCountOutputType = {
    roles: number
  }

  export type Str_userCountOutputTypeSelect = {
    roles?: boolean
  }

  export type Str_userCountOutputTypeGetPayload<
    S extends boolean | null | undefined | Str_userCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? Str_userCountOutputType
    : S extends undefined
    ? never
    : S extends Str_userCountOutputTypeArgs
    ?'include' extends U
    ? Str_userCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Str_userCountOutputType ?Str_userCountOutputType [P]
  : 
     never
  } 
    : Str_userCountOutputType
  : Str_userCountOutputType




  // Custom InputTypes

  /**
   * Str_userCountOutputType without action
   */
  export type Str_userCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the Str_userCountOutputType
     * 
    **/
    select?: Str_userCountOutputTypeSelect | null
  }



  /**
   * Count Type Str_roleCountOutputType
   */


  export type Str_roleCountOutputType = {
    users: number
    permissions: number
  }

  export type Str_roleCountOutputTypeSelect = {
    users?: boolean
    permissions?: boolean
  }

  export type Str_roleCountOutputTypeGetPayload<
    S extends boolean | null | undefined | Str_roleCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? Str_roleCountOutputType
    : S extends undefined
    ? never
    : S extends Str_roleCountOutputTypeArgs
    ?'include' extends U
    ? Str_roleCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Str_roleCountOutputType ?Str_roleCountOutputType [P]
  : 
     never
  } 
    : Str_roleCountOutputType
  : Str_roleCountOutputType




  // Custom InputTypes

  /**
   * Str_roleCountOutputType without action
   */
  export type Str_roleCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the Str_roleCountOutputType
     * 
    **/
    select?: Str_roleCountOutputTypeSelect | null
  }



  /**
   * Count Type Str_permissionCountOutputType
   */


  export type Str_permissionCountOutputType = {
    roles: number
  }

  export type Str_permissionCountOutputTypeSelect = {
    roles?: boolean
  }

  export type Str_permissionCountOutputTypeGetPayload<
    S extends boolean | null | undefined | Str_permissionCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? Str_permissionCountOutputType
    : S extends undefined
    ? never
    : S extends Str_permissionCountOutputTypeArgs
    ?'include' extends U
    ? Str_permissionCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Str_permissionCountOutputType ?Str_permissionCountOutputType [P]
  : 
     never
  } 
    : Str_permissionCountOutputType
  : Str_permissionCountOutputType




  // Custom InputTypes

  /**
   * Str_permissionCountOutputType without action
   */
  export type Str_permissionCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the Str_permissionCountOutputType
     * 
    **/
    select?: Str_permissionCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model str_user
   */


  export type AggregateStr_user = {
    _count: Str_userCountAggregateOutputType | null
    _avg: Str_userAvgAggregateOutputType | null
    _sum: Str_userSumAggregateOutputType | null
    _min: Str_userMinAggregateOutputType | null
    _max: Str_userMaxAggregateOutputType | null
  }

  export type Str_userAvgAggregateOutputType = {
    id: number | null
  }

  export type Str_userSumAggregateOutputType = {
    id: number | null
  }

  export type Str_userMinAggregateOutputType = {
    id: number | null
    username: string | null
    password: string | null
    firts_name: string | null
    last_name: string | null
    email: string | null
    birth_date: Date | null
  }

  export type Str_userMaxAggregateOutputType = {
    id: number | null
    username: string | null
    password: string | null
    firts_name: string | null
    last_name: string | null
    email: string | null
    birth_date: Date | null
  }

  export type Str_userCountAggregateOutputType = {
    id: number
    username: number
    password: number
    firts_name: number
    last_name: number
    email: number
    birth_date: number
    _all: number
  }


  export type Str_userAvgAggregateInputType = {
    id?: true
  }

  export type Str_userSumAggregateInputType = {
    id?: true
  }

  export type Str_userMinAggregateInputType = {
    id?: true
    username?: true
    password?: true
    firts_name?: true
    last_name?: true
    email?: true
    birth_date?: true
  }

  export type Str_userMaxAggregateInputType = {
    id?: true
    username?: true
    password?: true
    firts_name?: true
    last_name?: true
    email?: true
    birth_date?: true
  }

  export type Str_userCountAggregateInputType = {
    id?: true
    username?: true
    password?: true
    firts_name?: true
    last_name?: true
    email?: true
    birth_date?: true
    _all?: true
  }

  export type Str_userAggregateArgs = {
    /**
     * Filter which str_user to aggregate.
     * 
    **/
    where?: str_userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of str_users to fetch.
     * 
    **/
    orderBy?: Enumerable<str_userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: str_userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` str_users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` str_users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned str_users
    **/
    _count?: true | Str_userCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Str_userAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Str_userSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Str_userMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Str_userMaxAggregateInputType
  }

  export type GetStr_userAggregateType<T extends Str_userAggregateArgs> = {
        [P in keyof T & keyof AggregateStr_user]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStr_user[P]>
      : GetScalarType<T[P], AggregateStr_user[P]>
  }


    
    
  export type Str_userGroupByArgs = {
    where?: str_userWhereInput
    orderBy?: Enumerable<str_userOrderByWithAggregationInput>
    by: Array<Str_userScalarFieldEnum>
    having?: str_userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Str_userCountAggregateInputType | true
    _avg?: Str_userAvgAggregateInputType
    _sum?: Str_userSumAggregateInputType
    _min?: Str_userMinAggregateInputType
    _max?: Str_userMaxAggregateInputType
  }


  export type Str_userGroupByOutputType = {
    id: number
    username: string
    password: string
    firts_name: string
    last_name: string
    email: string
    birth_date: Date
    _count: Str_userCountAggregateOutputType | null
    _avg: Str_userAvgAggregateOutputType | null
    _sum: Str_userSumAggregateOutputType | null
    _min: Str_userMinAggregateOutputType | null
    _max: Str_userMaxAggregateOutputType | null
  }

  type GetStr_userGroupByPayload<T extends Str_userGroupByArgs> = Promise<
    Array<
      PickArray<Str_userGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof Str_userGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], Str_userGroupByOutputType[P]> 
            : GetScalarType<T[P], Str_userGroupByOutputType[P]>
        }
      > 
    >


  export type str_userSelect = {
    id?: boolean
    username?: boolean
    password?: boolean
    firts_name?: boolean
    last_name?: boolean
    email?: boolean
    birth_date?: boolean
    roles?: boolean | str_role_x_userFindManyArgs
    _count?: boolean | Str_userCountOutputTypeArgs
  }

  export type str_userInclude = {
    roles?: boolean | str_role_x_userFindManyArgs
    _count?: boolean | Str_userCountOutputTypeArgs
  }

  export type str_userGetPayload<
    S extends boolean | null | undefined | str_userArgs,
    U = keyof S
      > = S extends true
        ? str_user
    : S extends undefined
    ? never
    : S extends str_userArgs | str_userFindManyArgs
    ?'include' extends U
    ? str_user  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'roles'
        ? Array < str_role_x_userGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? Str_userCountOutputTypeGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof str_user ?str_user [P]
  : 
          P extends 'roles'
        ? Array < str_role_x_userGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? Str_userCountOutputTypeGetPayload<S['select'][P]> | null : never
  } 
    : str_user
  : str_user


  type str_userCountArgs = Merge<
    Omit<str_userFindManyArgs, 'select' | 'include'> & {
      select?: Str_userCountAggregateInputType | true
    }
  >

  export interface str_userDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Str_user that matches the filter.
     * @param {str_userFindUniqueArgs} args - Arguments to find a Str_user
     * @example
     * // Get one Str_user
     * const str_user = await prisma.str_user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends str_userFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, str_userFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'str_user'> extends True ? CheckSelect<T, Prisma__str_userClient<str_user>, Prisma__str_userClient<str_userGetPayload<T>>> : CheckSelect<T, Prisma__str_userClient<str_user | null >, Prisma__str_userClient<str_userGetPayload<T> | null >>

    /**
     * Find the first Str_user that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {str_userFindFirstArgs} args - Arguments to find a Str_user
     * @example
     * // Get one Str_user
     * const str_user = await prisma.str_user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends str_userFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, str_userFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'str_user'> extends True ? CheckSelect<T, Prisma__str_userClient<str_user>, Prisma__str_userClient<str_userGetPayload<T>>> : CheckSelect<T, Prisma__str_userClient<str_user | null >, Prisma__str_userClient<str_userGetPayload<T> | null >>

    /**
     * Find zero or more Str_users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {str_userFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Str_users
     * const str_users = await prisma.str_user.findMany()
     * 
     * // Get first 10 Str_users
     * const str_users = await prisma.str_user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const str_userWithIdOnly = await prisma.str_user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends str_userFindManyArgs>(
      args?: SelectSubset<T, str_userFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<str_user>>, PrismaPromise<Array<str_userGetPayload<T>>>>

    /**
     * Create a Str_user.
     * @param {str_userCreateArgs} args - Arguments to create a Str_user.
     * @example
     * // Create one Str_user
     * const Str_user = await prisma.str_user.create({
     *   data: {
     *     // ... data to create a Str_user
     *   }
     * })
     * 
    **/
    create<T extends str_userCreateArgs>(
      args: SelectSubset<T, str_userCreateArgs>
    ): CheckSelect<T, Prisma__str_userClient<str_user>, Prisma__str_userClient<str_userGetPayload<T>>>

    /**
     * Create many Str_users.
     *     @param {str_userCreateManyArgs} args - Arguments to create many Str_users.
     *     @example
     *     // Create many Str_users
     *     const str_user = await prisma.str_user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends str_userCreateManyArgs>(
      args?: SelectSubset<T, str_userCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Str_user.
     * @param {str_userDeleteArgs} args - Arguments to delete one Str_user.
     * @example
     * // Delete one Str_user
     * const Str_user = await prisma.str_user.delete({
     *   where: {
     *     // ... filter to delete one Str_user
     *   }
     * })
     * 
    **/
    delete<T extends str_userDeleteArgs>(
      args: SelectSubset<T, str_userDeleteArgs>
    ): CheckSelect<T, Prisma__str_userClient<str_user>, Prisma__str_userClient<str_userGetPayload<T>>>

    /**
     * Update one Str_user.
     * @param {str_userUpdateArgs} args - Arguments to update one Str_user.
     * @example
     * // Update one Str_user
     * const str_user = await prisma.str_user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends str_userUpdateArgs>(
      args: SelectSubset<T, str_userUpdateArgs>
    ): CheckSelect<T, Prisma__str_userClient<str_user>, Prisma__str_userClient<str_userGetPayload<T>>>

    /**
     * Delete zero or more Str_users.
     * @param {str_userDeleteManyArgs} args - Arguments to filter Str_users to delete.
     * @example
     * // Delete a few Str_users
     * const { count } = await prisma.str_user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends str_userDeleteManyArgs>(
      args?: SelectSubset<T, str_userDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Str_users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {str_userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Str_users
     * const str_user = await prisma.str_user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends str_userUpdateManyArgs>(
      args: SelectSubset<T, str_userUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Str_user.
     * @param {str_userUpsertArgs} args - Arguments to update or create a Str_user.
     * @example
     * // Update or create a Str_user
     * const str_user = await prisma.str_user.upsert({
     *   create: {
     *     // ... data to create a Str_user
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Str_user we want to update
     *   }
     * })
    **/
    upsert<T extends str_userUpsertArgs>(
      args: SelectSubset<T, str_userUpsertArgs>
    ): CheckSelect<T, Prisma__str_userClient<str_user>, Prisma__str_userClient<str_userGetPayload<T>>>

    /**
     * Count the number of Str_users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {str_userCountArgs} args - Arguments to filter Str_users to count.
     * @example
     * // Count the number of Str_users
     * const count = await prisma.str_user.count({
     *   where: {
     *     // ... the filter for the Str_users we want to count
     *   }
     * })
    **/
    count<T extends str_userCountArgs>(
      args?: Subset<T, str_userCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Str_userCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Str_user.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Str_userAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Str_userAggregateArgs>(args: Subset<T, Str_userAggregateArgs>): PrismaPromise<GetStr_userAggregateType<T>>

    /**
     * Group by Str_user.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Str_userGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Str_userGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Str_userGroupByArgs['orderBy'] }
        : { orderBy?: Str_userGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Str_userGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStr_userGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for str_user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__str_userClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    roles<T extends str_role_x_userFindManyArgs = {}>(args?: Subset<T, str_role_x_userFindManyArgs>): CheckSelect<T, PrismaPromise<Array<str_role_x_user>>, PrismaPromise<Array<str_role_x_userGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * str_user findUnique
   */
  export type str_userFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the str_user
     * 
    **/
    select?: str_userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: str_userInclude | null
    /**
     * Throw an Error if a str_user can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which str_user to fetch.
     * 
    **/
    where: str_userWhereUniqueInput
  }


  /**
   * str_user findFirst
   */
  export type str_userFindFirstArgs = {
    /**
     * Select specific fields to fetch from the str_user
     * 
    **/
    select?: str_userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: str_userInclude | null
    /**
     * Throw an Error if a str_user can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which str_user to fetch.
     * 
    **/
    where?: str_userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of str_users to fetch.
     * 
    **/
    orderBy?: Enumerable<str_userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for str_users.
     * 
    **/
    cursor?: str_userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` str_users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` str_users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of str_users.
     * 
    **/
    distinct?: Enumerable<Str_userScalarFieldEnum>
  }


  /**
   * str_user findMany
   */
  export type str_userFindManyArgs = {
    /**
     * Select specific fields to fetch from the str_user
     * 
    **/
    select?: str_userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: str_userInclude | null
    /**
     * Filter, which str_users to fetch.
     * 
    **/
    where?: str_userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of str_users to fetch.
     * 
    **/
    orderBy?: Enumerable<str_userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing str_users.
     * 
    **/
    cursor?: str_userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` str_users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` str_users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Str_userScalarFieldEnum>
  }


  /**
   * str_user create
   */
  export type str_userCreateArgs = {
    /**
     * Select specific fields to fetch from the str_user
     * 
    **/
    select?: str_userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: str_userInclude | null
    /**
     * The data needed to create a str_user.
     * 
    **/
    data: XOR<str_userCreateInput, str_userUncheckedCreateInput>
  }


  /**
   * str_user createMany
   */
  export type str_userCreateManyArgs = {
    data: Enumerable<str_userCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * str_user update
   */
  export type str_userUpdateArgs = {
    /**
     * Select specific fields to fetch from the str_user
     * 
    **/
    select?: str_userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: str_userInclude | null
    /**
     * The data needed to update a str_user.
     * 
    **/
    data: XOR<str_userUpdateInput, str_userUncheckedUpdateInput>
    /**
     * Choose, which str_user to update.
     * 
    **/
    where: str_userWhereUniqueInput
  }


  /**
   * str_user updateMany
   */
  export type str_userUpdateManyArgs = {
    data: XOR<str_userUpdateManyMutationInput, str_userUncheckedUpdateManyInput>
    where?: str_userWhereInput
  }


  /**
   * str_user upsert
   */
  export type str_userUpsertArgs = {
    /**
     * Select specific fields to fetch from the str_user
     * 
    **/
    select?: str_userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: str_userInclude | null
    /**
     * The filter to search for the str_user to update in case it exists.
     * 
    **/
    where: str_userWhereUniqueInput
    /**
     * In case the str_user found by the `where` argument doesn't exist, create a new str_user with this data.
     * 
    **/
    create: XOR<str_userCreateInput, str_userUncheckedCreateInput>
    /**
     * In case the str_user was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<str_userUpdateInput, str_userUncheckedUpdateInput>
  }


  /**
   * str_user delete
   */
  export type str_userDeleteArgs = {
    /**
     * Select specific fields to fetch from the str_user
     * 
    **/
    select?: str_userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: str_userInclude | null
    /**
     * Filter which str_user to delete.
     * 
    **/
    where: str_userWhereUniqueInput
  }


  /**
   * str_user deleteMany
   */
  export type str_userDeleteManyArgs = {
    where?: str_userWhereInput
  }


  /**
   * str_user without action
   */
  export type str_userArgs = {
    /**
     * Select specific fields to fetch from the str_user
     * 
    **/
    select?: str_userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: str_userInclude | null
  }



  /**
   * Model str_role
   */


  export type AggregateStr_role = {
    _count: Str_roleCountAggregateOutputType | null
    _avg: Str_roleAvgAggregateOutputType | null
    _sum: Str_roleSumAggregateOutputType | null
    _min: Str_roleMinAggregateOutputType | null
    _max: Str_roleMaxAggregateOutputType | null
  }

  export type Str_roleAvgAggregateOutputType = {
    id: number | null
  }

  export type Str_roleSumAggregateOutputType = {
    id: number | null
  }

  export type Str_roleMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
  }

  export type Str_roleMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
  }

  export type Str_roleCountAggregateOutputType = {
    id: number
    name: number
    description: number
    _all: number
  }


  export type Str_roleAvgAggregateInputType = {
    id?: true
  }

  export type Str_roleSumAggregateInputType = {
    id?: true
  }

  export type Str_roleMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
  }

  export type Str_roleMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
  }

  export type Str_roleCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    _all?: true
  }

  export type Str_roleAggregateArgs = {
    /**
     * Filter which str_role to aggregate.
     * 
    **/
    where?: str_roleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of str_roles to fetch.
     * 
    **/
    orderBy?: Enumerable<str_roleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: str_roleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` str_roles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` str_roles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned str_roles
    **/
    _count?: true | Str_roleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Str_roleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Str_roleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Str_roleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Str_roleMaxAggregateInputType
  }

  export type GetStr_roleAggregateType<T extends Str_roleAggregateArgs> = {
        [P in keyof T & keyof AggregateStr_role]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStr_role[P]>
      : GetScalarType<T[P], AggregateStr_role[P]>
  }


    
    
  export type Str_roleGroupByArgs = {
    where?: str_roleWhereInput
    orderBy?: Enumerable<str_roleOrderByWithAggregationInput>
    by: Array<Str_roleScalarFieldEnum>
    having?: str_roleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Str_roleCountAggregateInputType | true
    _avg?: Str_roleAvgAggregateInputType
    _sum?: Str_roleSumAggregateInputType
    _min?: Str_roleMinAggregateInputType
    _max?: Str_roleMaxAggregateInputType
  }


  export type Str_roleGroupByOutputType = {
    id: number
    name: string
    description: string
    _count: Str_roleCountAggregateOutputType | null
    _avg: Str_roleAvgAggregateOutputType | null
    _sum: Str_roleSumAggregateOutputType | null
    _min: Str_roleMinAggregateOutputType | null
    _max: Str_roleMaxAggregateOutputType | null
  }

  type GetStr_roleGroupByPayload<T extends Str_roleGroupByArgs> = Promise<
    Array<
      PickArray<Str_roleGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof Str_roleGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], Str_roleGroupByOutputType[P]> 
            : GetScalarType<T[P], Str_roleGroupByOutputType[P]>
        }
      > 
    >


  export type str_roleSelect = {
    id?: boolean
    name?: boolean
    description?: boolean
    users?: boolean | str_role_x_userFindManyArgs
    permissions?: boolean | str_permission_x_roleFindManyArgs
    _count?: boolean | Str_roleCountOutputTypeArgs
  }

  export type str_roleInclude = {
    users?: boolean | str_role_x_userFindManyArgs
    permissions?: boolean | str_permission_x_roleFindManyArgs
    _count?: boolean | Str_roleCountOutputTypeArgs
  }

  export type str_roleGetPayload<
    S extends boolean | null | undefined | str_roleArgs,
    U = keyof S
      > = S extends true
        ? str_role
    : S extends undefined
    ? never
    : S extends str_roleArgs | str_roleFindManyArgs
    ?'include' extends U
    ? str_role  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'users'
        ? Array < str_role_x_userGetPayload<S['include'][P]>>  :
        P extends 'permissions'
        ? Array < str_permission_x_roleGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? Str_roleCountOutputTypeGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof str_role ?str_role [P]
  : 
          P extends 'users'
        ? Array < str_role_x_userGetPayload<S['select'][P]>>  :
        P extends 'permissions'
        ? Array < str_permission_x_roleGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? Str_roleCountOutputTypeGetPayload<S['select'][P]> | null : never
  } 
    : str_role
  : str_role


  type str_roleCountArgs = Merge<
    Omit<str_roleFindManyArgs, 'select' | 'include'> & {
      select?: Str_roleCountAggregateInputType | true
    }
  >

  export interface str_roleDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Str_role that matches the filter.
     * @param {str_roleFindUniqueArgs} args - Arguments to find a Str_role
     * @example
     * // Get one Str_role
     * const str_role = await prisma.str_role.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends str_roleFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, str_roleFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'str_role'> extends True ? CheckSelect<T, Prisma__str_roleClient<str_role>, Prisma__str_roleClient<str_roleGetPayload<T>>> : CheckSelect<T, Prisma__str_roleClient<str_role | null >, Prisma__str_roleClient<str_roleGetPayload<T> | null >>

    /**
     * Find the first Str_role that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {str_roleFindFirstArgs} args - Arguments to find a Str_role
     * @example
     * // Get one Str_role
     * const str_role = await prisma.str_role.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends str_roleFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, str_roleFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'str_role'> extends True ? CheckSelect<T, Prisma__str_roleClient<str_role>, Prisma__str_roleClient<str_roleGetPayload<T>>> : CheckSelect<T, Prisma__str_roleClient<str_role | null >, Prisma__str_roleClient<str_roleGetPayload<T> | null >>

    /**
     * Find zero or more Str_roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {str_roleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Str_roles
     * const str_roles = await prisma.str_role.findMany()
     * 
     * // Get first 10 Str_roles
     * const str_roles = await prisma.str_role.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const str_roleWithIdOnly = await prisma.str_role.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends str_roleFindManyArgs>(
      args?: SelectSubset<T, str_roleFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<str_role>>, PrismaPromise<Array<str_roleGetPayload<T>>>>

    /**
     * Create a Str_role.
     * @param {str_roleCreateArgs} args - Arguments to create a Str_role.
     * @example
     * // Create one Str_role
     * const Str_role = await prisma.str_role.create({
     *   data: {
     *     // ... data to create a Str_role
     *   }
     * })
     * 
    **/
    create<T extends str_roleCreateArgs>(
      args: SelectSubset<T, str_roleCreateArgs>
    ): CheckSelect<T, Prisma__str_roleClient<str_role>, Prisma__str_roleClient<str_roleGetPayload<T>>>

    /**
     * Create many Str_roles.
     *     @param {str_roleCreateManyArgs} args - Arguments to create many Str_roles.
     *     @example
     *     // Create many Str_roles
     *     const str_role = await prisma.str_role.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends str_roleCreateManyArgs>(
      args?: SelectSubset<T, str_roleCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Str_role.
     * @param {str_roleDeleteArgs} args - Arguments to delete one Str_role.
     * @example
     * // Delete one Str_role
     * const Str_role = await prisma.str_role.delete({
     *   where: {
     *     // ... filter to delete one Str_role
     *   }
     * })
     * 
    **/
    delete<T extends str_roleDeleteArgs>(
      args: SelectSubset<T, str_roleDeleteArgs>
    ): CheckSelect<T, Prisma__str_roleClient<str_role>, Prisma__str_roleClient<str_roleGetPayload<T>>>

    /**
     * Update one Str_role.
     * @param {str_roleUpdateArgs} args - Arguments to update one Str_role.
     * @example
     * // Update one Str_role
     * const str_role = await prisma.str_role.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends str_roleUpdateArgs>(
      args: SelectSubset<T, str_roleUpdateArgs>
    ): CheckSelect<T, Prisma__str_roleClient<str_role>, Prisma__str_roleClient<str_roleGetPayload<T>>>

    /**
     * Delete zero or more Str_roles.
     * @param {str_roleDeleteManyArgs} args - Arguments to filter Str_roles to delete.
     * @example
     * // Delete a few Str_roles
     * const { count } = await prisma.str_role.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends str_roleDeleteManyArgs>(
      args?: SelectSubset<T, str_roleDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Str_roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {str_roleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Str_roles
     * const str_role = await prisma.str_role.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends str_roleUpdateManyArgs>(
      args: SelectSubset<T, str_roleUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Str_role.
     * @param {str_roleUpsertArgs} args - Arguments to update or create a Str_role.
     * @example
     * // Update or create a Str_role
     * const str_role = await prisma.str_role.upsert({
     *   create: {
     *     // ... data to create a Str_role
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Str_role we want to update
     *   }
     * })
    **/
    upsert<T extends str_roleUpsertArgs>(
      args: SelectSubset<T, str_roleUpsertArgs>
    ): CheckSelect<T, Prisma__str_roleClient<str_role>, Prisma__str_roleClient<str_roleGetPayload<T>>>

    /**
     * Count the number of Str_roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {str_roleCountArgs} args - Arguments to filter Str_roles to count.
     * @example
     * // Count the number of Str_roles
     * const count = await prisma.str_role.count({
     *   where: {
     *     // ... the filter for the Str_roles we want to count
     *   }
     * })
    **/
    count<T extends str_roleCountArgs>(
      args?: Subset<T, str_roleCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Str_roleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Str_role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Str_roleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Str_roleAggregateArgs>(args: Subset<T, Str_roleAggregateArgs>): PrismaPromise<GetStr_roleAggregateType<T>>

    /**
     * Group by Str_role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Str_roleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Str_roleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Str_roleGroupByArgs['orderBy'] }
        : { orderBy?: Str_roleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Str_roleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStr_roleGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for str_role.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__str_roleClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users<T extends str_role_x_userFindManyArgs = {}>(args?: Subset<T, str_role_x_userFindManyArgs>): CheckSelect<T, PrismaPromise<Array<str_role_x_user>>, PrismaPromise<Array<str_role_x_userGetPayload<T>>>>;

    permissions<T extends str_permission_x_roleFindManyArgs = {}>(args?: Subset<T, str_permission_x_roleFindManyArgs>): CheckSelect<T, PrismaPromise<Array<str_permission_x_role>>, PrismaPromise<Array<str_permission_x_roleGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * str_role findUnique
   */
  export type str_roleFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the str_role
     * 
    **/
    select?: str_roleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: str_roleInclude | null
    /**
     * Throw an Error if a str_role can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which str_role to fetch.
     * 
    **/
    where: str_roleWhereUniqueInput
  }


  /**
   * str_role findFirst
   */
  export type str_roleFindFirstArgs = {
    /**
     * Select specific fields to fetch from the str_role
     * 
    **/
    select?: str_roleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: str_roleInclude | null
    /**
     * Throw an Error if a str_role can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which str_role to fetch.
     * 
    **/
    where?: str_roleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of str_roles to fetch.
     * 
    **/
    orderBy?: Enumerable<str_roleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for str_roles.
     * 
    **/
    cursor?: str_roleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` str_roles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` str_roles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of str_roles.
     * 
    **/
    distinct?: Enumerable<Str_roleScalarFieldEnum>
  }


  /**
   * str_role findMany
   */
  export type str_roleFindManyArgs = {
    /**
     * Select specific fields to fetch from the str_role
     * 
    **/
    select?: str_roleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: str_roleInclude | null
    /**
     * Filter, which str_roles to fetch.
     * 
    **/
    where?: str_roleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of str_roles to fetch.
     * 
    **/
    orderBy?: Enumerable<str_roleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing str_roles.
     * 
    **/
    cursor?: str_roleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` str_roles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` str_roles.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Str_roleScalarFieldEnum>
  }


  /**
   * str_role create
   */
  export type str_roleCreateArgs = {
    /**
     * Select specific fields to fetch from the str_role
     * 
    **/
    select?: str_roleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: str_roleInclude | null
    /**
     * The data needed to create a str_role.
     * 
    **/
    data: XOR<str_roleCreateInput, str_roleUncheckedCreateInput>
  }


  /**
   * str_role createMany
   */
  export type str_roleCreateManyArgs = {
    data: Enumerable<str_roleCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * str_role update
   */
  export type str_roleUpdateArgs = {
    /**
     * Select specific fields to fetch from the str_role
     * 
    **/
    select?: str_roleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: str_roleInclude | null
    /**
     * The data needed to update a str_role.
     * 
    **/
    data: XOR<str_roleUpdateInput, str_roleUncheckedUpdateInput>
    /**
     * Choose, which str_role to update.
     * 
    **/
    where: str_roleWhereUniqueInput
  }


  /**
   * str_role updateMany
   */
  export type str_roleUpdateManyArgs = {
    data: XOR<str_roleUpdateManyMutationInput, str_roleUncheckedUpdateManyInput>
    where?: str_roleWhereInput
  }


  /**
   * str_role upsert
   */
  export type str_roleUpsertArgs = {
    /**
     * Select specific fields to fetch from the str_role
     * 
    **/
    select?: str_roleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: str_roleInclude | null
    /**
     * The filter to search for the str_role to update in case it exists.
     * 
    **/
    where: str_roleWhereUniqueInput
    /**
     * In case the str_role found by the `where` argument doesn't exist, create a new str_role with this data.
     * 
    **/
    create: XOR<str_roleCreateInput, str_roleUncheckedCreateInput>
    /**
     * In case the str_role was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<str_roleUpdateInput, str_roleUncheckedUpdateInput>
  }


  /**
   * str_role delete
   */
  export type str_roleDeleteArgs = {
    /**
     * Select specific fields to fetch from the str_role
     * 
    **/
    select?: str_roleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: str_roleInclude | null
    /**
     * Filter which str_role to delete.
     * 
    **/
    where: str_roleWhereUniqueInput
  }


  /**
   * str_role deleteMany
   */
  export type str_roleDeleteManyArgs = {
    where?: str_roleWhereInput
  }


  /**
   * str_role without action
   */
  export type str_roleArgs = {
    /**
     * Select specific fields to fetch from the str_role
     * 
    **/
    select?: str_roleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: str_roleInclude | null
  }



  /**
   * Model str_permission
   */


  export type AggregateStr_permission = {
    _count: Str_permissionCountAggregateOutputType | null
    _avg: Str_permissionAvgAggregateOutputType | null
    _sum: Str_permissionSumAggregateOutputType | null
    _min: Str_permissionMinAggregateOutputType | null
    _max: Str_permissionMaxAggregateOutputType | null
  }

  export type Str_permissionAvgAggregateOutputType = {
    id: number | null
  }

  export type Str_permissionSumAggregateOutputType = {
    id: number | null
  }

  export type Str_permissionMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
  }

  export type Str_permissionMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
  }

  export type Str_permissionCountAggregateOutputType = {
    id: number
    name: number
    description: number
    _all: number
  }


  export type Str_permissionAvgAggregateInputType = {
    id?: true
  }

  export type Str_permissionSumAggregateInputType = {
    id?: true
  }

  export type Str_permissionMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
  }

  export type Str_permissionMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
  }

  export type Str_permissionCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    _all?: true
  }

  export type Str_permissionAggregateArgs = {
    /**
     * Filter which str_permission to aggregate.
     * 
    **/
    where?: str_permissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of str_permissions to fetch.
     * 
    **/
    orderBy?: Enumerable<str_permissionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: str_permissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` str_permissions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` str_permissions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned str_permissions
    **/
    _count?: true | Str_permissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Str_permissionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Str_permissionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Str_permissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Str_permissionMaxAggregateInputType
  }

  export type GetStr_permissionAggregateType<T extends Str_permissionAggregateArgs> = {
        [P in keyof T & keyof AggregateStr_permission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStr_permission[P]>
      : GetScalarType<T[P], AggregateStr_permission[P]>
  }


    
    
  export type Str_permissionGroupByArgs = {
    where?: str_permissionWhereInput
    orderBy?: Enumerable<str_permissionOrderByWithAggregationInput>
    by: Array<Str_permissionScalarFieldEnum>
    having?: str_permissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Str_permissionCountAggregateInputType | true
    _avg?: Str_permissionAvgAggregateInputType
    _sum?: Str_permissionSumAggregateInputType
    _min?: Str_permissionMinAggregateInputType
    _max?: Str_permissionMaxAggregateInputType
  }


  export type Str_permissionGroupByOutputType = {
    id: number
    name: string
    description: string
    _count: Str_permissionCountAggregateOutputType | null
    _avg: Str_permissionAvgAggregateOutputType | null
    _sum: Str_permissionSumAggregateOutputType | null
    _min: Str_permissionMinAggregateOutputType | null
    _max: Str_permissionMaxAggregateOutputType | null
  }

  type GetStr_permissionGroupByPayload<T extends Str_permissionGroupByArgs> = Promise<
    Array<
      PickArray<Str_permissionGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof Str_permissionGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], Str_permissionGroupByOutputType[P]> 
            : GetScalarType<T[P], Str_permissionGroupByOutputType[P]>
        }
      > 
    >


  export type str_permissionSelect = {
    id?: boolean
    name?: boolean
    description?: boolean
    roles?: boolean | str_permission_x_roleFindManyArgs
    _count?: boolean | Str_permissionCountOutputTypeArgs
  }

  export type str_permissionInclude = {
    roles?: boolean | str_permission_x_roleFindManyArgs
    _count?: boolean | Str_permissionCountOutputTypeArgs
  }

  export type str_permissionGetPayload<
    S extends boolean | null | undefined | str_permissionArgs,
    U = keyof S
      > = S extends true
        ? str_permission
    : S extends undefined
    ? never
    : S extends str_permissionArgs | str_permissionFindManyArgs
    ?'include' extends U
    ? str_permission  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'roles'
        ? Array < str_permission_x_roleGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? Str_permissionCountOutputTypeGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof str_permission ?str_permission [P]
  : 
          P extends 'roles'
        ? Array < str_permission_x_roleGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? Str_permissionCountOutputTypeGetPayload<S['select'][P]> | null : never
  } 
    : str_permission
  : str_permission


  type str_permissionCountArgs = Merge<
    Omit<str_permissionFindManyArgs, 'select' | 'include'> & {
      select?: Str_permissionCountAggregateInputType | true
    }
  >

  export interface str_permissionDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Str_permission that matches the filter.
     * @param {str_permissionFindUniqueArgs} args - Arguments to find a Str_permission
     * @example
     * // Get one Str_permission
     * const str_permission = await prisma.str_permission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends str_permissionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, str_permissionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'str_permission'> extends True ? CheckSelect<T, Prisma__str_permissionClient<str_permission>, Prisma__str_permissionClient<str_permissionGetPayload<T>>> : CheckSelect<T, Prisma__str_permissionClient<str_permission | null >, Prisma__str_permissionClient<str_permissionGetPayload<T> | null >>

    /**
     * Find the first Str_permission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {str_permissionFindFirstArgs} args - Arguments to find a Str_permission
     * @example
     * // Get one Str_permission
     * const str_permission = await prisma.str_permission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends str_permissionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, str_permissionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'str_permission'> extends True ? CheckSelect<T, Prisma__str_permissionClient<str_permission>, Prisma__str_permissionClient<str_permissionGetPayload<T>>> : CheckSelect<T, Prisma__str_permissionClient<str_permission | null >, Prisma__str_permissionClient<str_permissionGetPayload<T> | null >>

    /**
     * Find zero or more Str_permissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {str_permissionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Str_permissions
     * const str_permissions = await prisma.str_permission.findMany()
     * 
     * // Get first 10 Str_permissions
     * const str_permissions = await prisma.str_permission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const str_permissionWithIdOnly = await prisma.str_permission.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends str_permissionFindManyArgs>(
      args?: SelectSubset<T, str_permissionFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<str_permission>>, PrismaPromise<Array<str_permissionGetPayload<T>>>>

    /**
     * Create a Str_permission.
     * @param {str_permissionCreateArgs} args - Arguments to create a Str_permission.
     * @example
     * // Create one Str_permission
     * const Str_permission = await prisma.str_permission.create({
     *   data: {
     *     // ... data to create a Str_permission
     *   }
     * })
     * 
    **/
    create<T extends str_permissionCreateArgs>(
      args: SelectSubset<T, str_permissionCreateArgs>
    ): CheckSelect<T, Prisma__str_permissionClient<str_permission>, Prisma__str_permissionClient<str_permissionGetPayload<T>>>

    /**
     * Create many Str_permissions.
     *     @param {str_permissionCreateManyArgs} args - Arguments to create many Str_permissions.
     *     @example
     *     // Create many Str_permissions
     *     const str_permission = await prisma.str_permission.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends str_permissionCreateManyArgs>(
      args?: SelectSubset<T, str_permissionCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Str_permission.
     * @param {str_permissionDeleteArgs} args - Arguments to delete one Str_permission.
     * @example
     * // Delete one Str_permission
     * const Str_permission = await prisma.str_permission.delete({
     *   where: {
     *     // ... filter to delete one Str_permission
     *   }
     * })
     * 
    **/
    delete<T extends str_permissionDeleteArgs>(
      args: SelectSubset<T, str_permissionDeleteArgs>
    ): CheckSelect<T, Prisma__str_permissionClient<str_permission>, Prisma__str_permissionClient<str_permissionGetPayload<T>>>

    /**
     * Update one Str_permission.
     * @param {str_permissionUpdateArgs} args - Arguments to update one Str_permission.
     * @example
     * // Update one Str_permission
     * const str_permission = await prisma.str_permission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends str_permissionUpdateArgs>(
      args: SelectSubset<T, str_permissionUpdateArgs>
    ): CheckSelect<T, Prisma__str_permissionClient<str_permission>, Prisma__str_permissionClient<str_permissionGetPayload<T>>>

    /**
     * Delete zero or more Str_permissions.
     * @param {str_permissionDeleteManyArgs} args - Arguments to filter Str_permissions to delete.
     * @example
     * // Delete a few Str_permissions
     * const { count } = await prisma.str_permission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends str_permissionDeleteManyArgs>(
      args?: SelectSubset<T, str_permissionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Str_permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {str_permissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Str_permissions
     * const str_permission = await prisma.str_permission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends str_permissionUpdateManyArgs>(
      args: SelectSubset<T, str_permissionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Str_permission.
     * @param {str_permissionUpsertArgs} args - Arguments to update or create a Str_permission.
     * @example
     * // Update or create a Str_permission
     * const str_permission = await prisma.str_permission.upsert({
     *   create: {
     *     // ... data to create a Str_permission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Str_permission we want to update
     *   }
     * })
    **/
    upsert<T extends str_permissionUpsertArgs>(
      args: SelectSubset<T, str_permissionUpsertArgs>
    ): CheckSelect<T, Prisma__str_permissionClient<str_permission>, Prisma__str_permissionClient<str_permissionGetPayload<T>>>

    /**
     * Count the number of Str_permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {str_permissionCountArgs} args - Arguments to filter Str_permissions to count.
     * @example
     * // Count the number of Str_permissions
     * const count = await prisma.str_permission.count({
     *   where: {
     *     // ... the filter for the Str_permissions we want to count
     *   }
     * })
    **/
    count<T extends str_permissionCountArgs>(
      args?: Subset<T, str_permissionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Str_permissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Str_permission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Str_permissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Str_permissionAggregateArgs>(args: Subset<T, Str_permissionAggregateArgs>): PrismaPromise<GetStr_permissionAggregateType<T>>

    /**
     * Group by Str_permission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Str_permissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Str_permissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Str_permissionGroupByArgs['orderBy'] }
        : { orderBy?: Str_permissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Str_permissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStr_permissionGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for str_permission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__str_permissionClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    roles<T extends str_permission_x_roleFindManyArgs = {}>(args?: Subset<T, str_permission_x_roleFindManyArgs>): CheckSelect<T, PrismaPromise<Array<str_permission_x_role>>, PrismaPromise<Array<str_permission_x_roleGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * str_permission findUnique
   */
  export type str_permissionFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the str_permission
     * 
    **/
    select?: str_permissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: str_permissionInclude | null
    /**
     * Throw an Error if a str_permission can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which str_permission to fetch.
     * 
    **/
    where: str_permissionWhereUniqueInput
  }


  /**
   * str_permission findFirst
   */
  export type str_permissionFindFirstArgs = {
    /**
     * Select specific fields to fetch from the str_permission
     * 
    **/
    select?: str_permissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: str_permissionInclude | null
    /**
     * Throw an Error if a str_permission can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which str_permission to fetch.
     * 
    **/
    where?: str_permissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of str_permissions to fetch.
     * 
    **/
    orderBy?: Enumerable<str_permissionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for str_permissions.
     * 
    **/
    cursor?: str_permissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` str_permissions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` str_permissions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of str_permissions.
     * 
    **/
    distinct?: Enumerable<Str_permissionScalarFieldEnum>
  }


  /**
   * str_permission findMany
   */
  export type str_permissionFindManyArgs = {
    /**
     * Select specific fields to fetch from the str_permission
     * 
    **/
    select?: str_permissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: str_permissionInclude | null
    /**
     * Filter, which str_permissions to fetch.
     * 
    **/
    where?: str_permissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of str_permissions to fetch.
     * 
    **/
    orderBy?: Enumerable<str_permissionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing str_permissions.
     * 
    **/
    cursor?: str_permissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` str_permissions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` str_permissions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Str_permissionScalarFieldEnum>
  }


  /**
   * str_permission create
   */
  export type str_permissionCreateArgs = {
    /**
     * Select specific fields to fetch from the str_permission
     * 
    **/
    select?: str_permissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: str_permissionInclude | null
    /**
     * The data needed to create a str_permission.
     * 
    **/
    data: XOR<str_permissionCreateInput, str_permissionUncheckedCreateInput>
  }


  /**
   * str_permission createMany
   */
  export type str_permissionCreateManyArgs = {
    data: Enumerable<str_permissionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * str_permission update
   */
  export type str_permissionUpdateArgs = {
    /**
     * Select specific fields to fetch from the str_permission
     * 
    **/
    select?: str_permissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: str_permissionInclude | null
    /**
     * The data needed to update a str_permission.
     * 
    **/
    data: XOR<str_permissionUpdateInput, str_permissionUncheckedUpdateInput>
    /**
     * Choose, which str_permission to update.
     * 
    **/
    where: str_permissionWhereUniqueInput
  }


  /**
   * str_permission updateMany
   */
  export type str_permissionUpdateManyArgs = {
    data: XOR<str_permissionUpdateManyMutationInput, str_permissionUncheckedUpdateManyInput>
    where?: str_permissionWhereInput
  }


  /**
   * str_permission upsert
   */
  export type str_permissionUpsertArgs = {
    /**
     * Select specific fields to fetch from the str_permission
     * 
    **/
    select?: str_permissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: str_permissionInclude | null
    /**
     * The filter to search for the str_permission to update in case it exists.
     * 
    **/
    where: str_permissionWhereUniqueInput
    /**
     * In case the str_permission found by the `where` argument doesn't exist, create a new str_permission with this data.
     * 
    **/
    create: XOR<str_permissionCreateInput, str_permissionUncheckedCreateInput>
    /**
     * In case the str_permission was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<str_permissionUpdateInput, str_permissionUncheckedUpdateInput>
  }


  /**
   * str_permission delete
   */
  export type str_permissionDeleteArgs = {
    /**
     * Select specific fields to fetch from the str_permission
     * 
    **/
    select?: str_permissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: str_permissionInclude | null
    /**
     * Filter which str_permission to delete.
     * 
    **/
    where: str_permissionWhereUniqueInput
  }


  /**
   * str_permission deleteMany
   */
  export type str_permissionDeleteManyArgs = {
    where?: str_permissionWhereInput
  }


  /**
   * str_permission without action
   */
  export type str_permissionArgs = {
    /**
     * Select specific fields to fetch from the str_permission
     * 
    **/
    select?: str_permissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: str_permissionInclude | null
  }



  /**
   * Model str_role_x_user
   */


  export type AggregateStr_role_x_user = {
    _count: Str_role_x_userCountAggregateOutputType | null
    _avg: Str_role_x_userAvgAggregateOutputType | null
    _sum: Str_role_x_userSumAggregateOutputType | null
    _min: Str_role_x_userMinAggregateOutputType | null
    _max: Str_role_x_userMaxAggregateOutputType | null
  }

  export type Str_role_x_userAvgAggregateOutputType = {
    id: number | null
    id_role: number | null
    id_user: number | null
    created_by_id: number | null
    updated_by_id: number | null
  }

  export type Str_role_x_userSumAggregateOutputType = {
    id: number | null
    id_role: number | null
    id_user: number | null
    created_by_id: number | null
    updated_by_id: number | null
  }

  export type Str_role_x_userMinAggregateOutputType = {
    id: number | null
    id_role: number | null
    id_user: number | null
    created_at: Date | null
    updated_at: Date | null
    created_by_id: number | null
    updated_by_id: number | null
  }

  export type Str_role_x_userMaxAggregateOutputType = {
    id: number | null
    id_role: number | null
    id_user: number | null
    created_at: Date | null
    updated_at: Date | null
    created_by_id: number | null
    updated_by_id: number | null
  }

  export type Str_role_x_userCountAggregateOutputType = {
    id: number
    id_role: number
    id_user: number
    created_at: number
    updated_at: number
    created_by_id: number
    updated_by_id: number
    _all: number
  }


  export type Str_role_x_userAvgAggregateInputType = {
    id?: true
    id_role?: true
    id_user?: true
    created_by_id?: true
    updated_by_id?: true
  }

  export type Str_role_x_userSumAggregateInputType = {
    id?: true
    id_role?: true
    id_user?: true
    created_by_id?: true
    updated_by_id?: true
  }

  export type Str_role_x_userMinAggregateInputType = {
    id?: true
    id_role?: true
    id_user?: true
    created_at?: true
    updated_at?: true
    created_by_id?: true
    updated_by_id?: true
  }

  export type Str_role_x_userMaxAggregateInputType = {
    id?: true
    id_role?: true
    id_user?: true
    created_at?: true
    updated_at?: true
    created_by_id?: true
    updated_by_id?: true
  }

  export type Str_role_x_userCountAggregateInputType = {
    id?: true
    id_role?: true
    id_user?: true
    created_at?: true
    updated_at?: true
    created_by_id?: true
    updated_by_id?: true
    _all?: true
  }

  export type Str_role_x_userAggregateArgs = {
    /**
     * Filter which str_role_x_user to aggregate.
     * 
    **/
    where?: str_role_x_userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of str_role_x_users to fetch.
     * 
    **/
    orderBy?: Enumerable<str_role_x_userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: str_role_x_userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` str_role_x_users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` str_role_x_users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned str_role_x_users
    **/
    _count?: true | Str_role_x_userCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Str_role_x_userAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Str_role_x_userSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Str_role_x_userMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Str_role_x_userMaxAggregateInputType
  }

  export type GetStr_role_x_userAggregateType<T extends Str_role_x_userAggregateArgs> = {
        [P in keyof T & keyof AggregateStr_role_x_user]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStr_role_x_user[P]>
      : GetScalarType<T[P], AggregateStr_role_x_user[P]>
  }


    
    
  export type Str_role_x_userGroupByArgs = {
    where?: str_role_x_userWhereInput
    orderBy?: Enumerable<str_role_x_userOrderByWithAggregationInput>
    by: Array<Str_role_x_userScalarFieldEnum>
    having?: str_role_x_userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Str_role_x_userCountAggregateInputType | true
    _avg?: Str_role_x_userAvgAggregateInputType
    _sum?: Str_role_x_userSumAggregateInputType
    _min?: Str_role_x_userMinAggregateInputType
    _max?: Str_role_x_userMaxAggregateInputType
  }


  export type Str_role_x_userGroupByOutputType = {
    id: number
    id_role: number
    id_user: number
    created_at: Date
    updated_at: Date
    created_by_id: number
    updated_by_id: number
    _count: Str_role_x_userCountAggregateOutputType | null
    _avg: Str_role_x_userAvgAggregateOutputType | null
    _sum: Str_role_x_userSumAggregateOutputType | null
    _min: Str_role_x_userMinAggregateOutputType | null
    _max: Str_role_x_userMaxAggregateOutputType | null
  }

  type GetStr_role_x_userGroupByPayload<T extends Str_role_x_userGroupByArgs> = Promise<
    Array<
      PickArray<Str_role_x_userGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof Str_role_x_userGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], Str_role_x_userGroupByOutputType[P]> 
            : GetScalarType<T[P], Str_role_x_userGroupByOutputType[P]>
        }
      > 
    >


  export type str_role_x_userSelect = {
    id?: boolean
    user?: boolean | str_userArgs
    role?: boolean | str_roleArgs
    id_role?: boolean
    id_user?: boolean
    created_at?: boolean
    updated_at?: boolean
    created_by_id?: boolean
    updated_by_id?: boolean
  }

  export type str_role_x_userInclude = {
    user?: boolean | str_userArgs
    role?: boolean | str_roleArgs
  }

  export type str_role_x_userGetPayload<
    S extends boolean | null | undefined | str_role_x_userArgs,
    U = keyof S
      > = S extends true
        ? str_role_x_user
    : S extends undefined
    ? never
    : S extends str_role_x_userArgs | str_role_x_userFindManyArgs
    ?'include' extends U
    ? str_role_x_user  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'user'
        ? str_userGetPayload<S['include'][P]> :
        P extends 'role'
        ? str_roleGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof str_role_x_user ?str_role_x_user [P]
  : 
          P extends 'user'
        ? str_userGetPayload<S['select'][P]> :
        P extends 'role'
        ? str_roleGetPayload<S['select'][P]> : never
  } 
    : str_role_x_user
  : str_role_x_user


  type str_role_x_userCountArgs = Merge<
    Omit<str_role_x_userFindManyArgs, 'select' | 'include'> & {
      select?: Str_role_x_userCountAggregateInputType | true
    }
  >

  export interface str_role_x_userDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Str_role_x_user that matches the filter.
     * @param {str_role_x_userFindUniqueArgs} args - Arguments to find a Str_role_x_user
     * @example
     * // Get one Str_role_x_user
     * const str_role_x_user = await prisma.str_role_x_user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends str_role_x_userFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, str_role_x_userFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'str_role_x_user'> extends True ? CheckSelect<T, Prisma__str_role_x_userClient<str_role_x_user>, Prisma__str_role_x_userClient<str_role_x_userGetPayload<T>>> : CheckSelect<T, Prisma__str_role_x_userClient<str_role_x_user | null >, Prisma__str_role_x_userClient<str_role_x_userGetPayload<T> | null >>

    /**
     * Find the first Str_role_x_user that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {str_role_x_userFindFirstArgs} args - Arguments to find a Str_role_x_user
     * @example
     * // Get one Str_role_x_user
     * const str_role_x_user = await prisma.str_role_x_user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends str_role_x_userFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, str_role_x_userFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'str_role_x_user'> extends True ? CheckSelect<T, Prisma__str_role_x_userClient<str_role_x_user>, Prisma__str_role_x_userClient<str_role_x_userGetPayload<T>>> : CheckSelect<T, Prisma__str_role_x_userClient<str_role_x_user | null >, Prisma__str_role_x_userClient<str_role_x_userGetPayload<T> | null >>

    /**
     * Find zero or more Str_role_x_users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {str_role_x_userFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Str_role_x_users
     * const str_role_x_users = await prisma.str_role_x_user.findMany()
     * 
     * // Get first 10 Str_role_x_users
     * const str_role_x_users = await prisma.str_role_x_user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const str_role_x_userWithIdOnly = await prisma.str_role_x_user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends str_role_x_userFindManyArgs>(
      args?: SelectSubset<T, str_role_x_userFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<str_role_x_user>>, PrismaPromise<Array<str_role_x_userGetPayload<T>>>>

    /**
     * Create a Str_role_x_user.
     * @param {str_role_x_userCreateArgs} args - Arguments to create a Str_role_x_user.
     * @example
     * // Create one Str_role_x_user
     * const Str_role_x_user = await prisma.str_role_x_user.create({
     *   data: {
     *     // ... data to create a Str_role_x_user
     *   }
     * })
     * 
    **/
    create<T extends str_role_x_userCreateArgs>(
      args: SelectSubset<T, str_role_x_userCreateArgs>
    ): CheckSelect<T, Prisma__str_role_x_userClient<str_role_x_user>, Prisma__str_role_x_userClient<str_role_x_userGetPayload<T>>>

    /**
     * Create many Str_role_x_users.
     *     @param {str_role_x_userCreateManyArgs} args - Arguments to create many Str_role_x_users.
     *     @example
     *     // Create many Str_role_x_users
     *     const str_role_x_user = await prisma.str_role_x_user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends str_role_x_userCreateManyArgs>(
      args?: SelectSubset<T, str_role_x_userCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Str_role_x_user.
     * @param {str_role_x_userDeleteArgs} args - Arguments to delete one Str_role_x_user.
     * @example
     * // Delete one Str_role_x_user
     * const Str_role_x_user = await prisma.str_role_x_user.delete({
     *   where: {
     *     // ... filter to delete one Str_role_x_user
     *   }
     * })
     * 
    **/
    delete<T extends str_role_x_userDeleteArgs>(
      args: SelectSubset<T, str_role_x_userDeleteArgs>
    ): CheckSelect<T, Prisma__str_role_x_userClient<str_role_x_user>, Prisma__str_role_x_userClient<str_role_x_userGetPayload<T>>>

    /**
     * Update one Str_role_x_user.
     * @param {str_role_x_userUpdateArgs} args - Arguments to update one Str_role_x_user.
     * @example
     * // Update one Str_role_x_user
     * const str_role_x_user = await prisma.str_role_x_user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends str_role_x_userUpdateArgs>(
      args: SelectSubset<T, str_role_x_userUpdateArgs>
    ): CheckSelect<T, Prisma__str_role_x_userClient<str_role_x_user>, Prisma__str_role_x_userClient<str_role_x_userGetPayload<T>>>

    /**
     * Delete zero or more Str_role_x_users.
     * @param {str_role_x_userDeleteManyArgs} args - Arguments to filter Str_role_x_users to delete.
     * @example
     * // Delete a few Str_role_x_users
     * const { count } = await prisma.str_role_x_user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends str_role_x_userDeleteManyArgs>(
      args?: SelectSubset<T, str_role_x_userDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Str_role_x_users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {str_role_x_userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Str_role_x_users
     * const str_role_x_user = await prisma.str_role_x_user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends str_role_x_userUpdateManyArgs>(
      args: SelectSubset<T, str_role_x_userUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Str_role_x_user.
     * @param {str_role_x_userUpsertArgs} args - Arguments to update or create a Str_role_x_user.
     * @example
     * // Update or create a Str_role_x_user
     * const str_role_x_user = await prisma.str_role_x_user.upsert({
     *   create: {
     *     // ... data to create a Str_role_x_user
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Str_role_x_user we want to update
     *   }
     * })
    **/
    upsert<T extends str_role_x_userUpsertArgs>(
      args: SelectSubset<T, str_role_x_userUpsertArgs>
    ): CheckSelect<T, Prisma__str_role_x_userClient<str_role_x_user>, Prisma__str_role_x_userClient<str_role_x_userGetPayload<T>>>

    /**
     * Count the number of Str_role_x_users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {str_role_x_userCountArgs} args - Arguments to filter Str_role_x_users to count.
     * @example
     * // Count the number of Str_role_x_users
     * const count = await prisma.str_role_x_user.count({
     *   where: {
     *     // ... the filter for the Str_role_x_users we want to count
     *   }
     * })
    **/
    count<T extends str_role_x_userCountArgs>(
      args?: Subset<T, str_role_x_userCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Str_role_x_userCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Str_role_x_user.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Str_role_x_userAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Str_role_x_userAggregateArgs>(args: Subset<T, Str_role_x_userAggregateArgs>): PrismaPromise<GetStr_role_x_userAggregateType<T>>

    /**
     * Group by Str_role_x_user.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Str_role_x_userGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Str_role_x_userGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Str_role_x_userGroupByArgs['orderBy'] }
        : { orderBy?: Str_role_x_userGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Str_role_x_userGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStr_role_x_userGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for str_role_x_user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__str_role_x_userClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends str_userArgs = {}>(args?: Subset<T, str_userArgs>): CheckSelect<T, Prisma__str_userClient<str_user | null >, Prisma__str_userClient<str_userGetPayload<T> | null >>;

    role<T extends str_roleArgs = {}>(args?: Subset<T, str_roleArgs>): CheckSelect<T, Prisma__str_roleClient<str_role | null >, Prisma__str_roleClient<str_roleGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * str_role_x_user findUnique
   */
  export type str_role_x_userFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the str_role_x_user
     * 
    **/
    select?: str_role_x_userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: str_role_x_userInclude | null
    /**
     * Throw an Error if a str_role_x_user can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which str_role_x_user to fetch.
     * 
    **/
    where: str_role_x_userWhereUniqueInput
  }


  /**
   * str_role_x_user findFirst
   */
  export type str_role_x_userFindFirstArgs = {
    /**
     * Select specific fields to fetch from the str_role_x_user
     * 
    **/
    select?: str_role_x_userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: str_role_x_userInclude | null
    /**
     * Throw an Error if a str_role_x_user can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which str_role_x_user to fetch.
     * 
    **/
    where?: str_role_x_userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of str_role_x_users to fetch.
     * 
    **/
    orderBy?: Enumerable<str_role_x_userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for str_role_x_users.
     * 
    **/
    cursor?: str_role_x_userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` str_role_x_users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` str_role_x_users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of str_role_x_users.
     * 
    **/
    distinct?: Enumerable<Str_role_x_userScalarFieldEnum>
  }


  /**
   * str_role_x_user findMany
   */
  export type str_role_x_userFindManyArgs = {
    /**
     * Select specific fields to fetch from the str_role_x_user
     * 
    **/
    select?: str_role_x_userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: str_role_x_userInclude | null
    /**
     * Filter, which str_role_x_users to fetch.
     * 
    **/
    where?: str_role_x_userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of str_role_x_users to fetch.
     * 
    **/
    orderBy?: Enumerable<str_role_x_userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing str_role_x_users.
     * 
    **/
    cursor?: str_role_x_userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` str_role_x_users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` str_role_x_users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Str_role_x_userScalarFieldEnum>
  }


  /**
   * str_role_x_user create
   */
  export type str_role_x_userCreateArgs = {
    /**
     * Select specific fields to fetch from the str_role_x_user
     * 
    **/
    select?: str_role_x_userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: str_role_x_userInclude | null
    /**
     * The data needed to create a str_role_x_user.
     * 
    **/
    data: XOR<str_role_x_userCreateInput, str_role_x_userUncheckedCreateInput>
  }


  /**
   * str_role_x_user createMany
   */
  export type str_role_x_userCreateManyArgs = {
    data: Enumerable<str_role_x_userCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * str_role_x_user update
   */
  export type str_role_x_userUpdateArgs = {
    /**
     * Select specific fields to fetch from the str_role_x_user
     * 
    **/
    select?: str_role_x_userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: str_role_x_userInclude | null
    /**
     * The data needed to update a str_role_x_user.
     * 
    **/
    data: XOR<str_role_x_userUpdateInput, str_role_x_userUncheckedUpdateInput>
    /**
     * Choose, which str_role_x_user to update.
     * 
    **/
    where: str_role_x_userWhereUniqueInput
  }


  /**
   * str_role_x_user updateMany
   */
  export type str_role_x_userUpdateManyArgs = {
    data: XOR<str_role_x_userUpdateManyMutationInput, str_role_x_userUncheckedUpdateManyInput>
    where?: str_role_x_userWhereInput
  }


  /**
   * str_role_x_user upsert
   */
  export type str_role_x_userUpsertArgs = {
    /**
     * Select specific fields to fetch from the str_role_x_user
     * 
    **/
    select?: str_role_x_userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: str_role_x_userInclude | null
    /**
     * The filter to search for the str_role_x_user to update in case it exists.
     * 
    **/
    where: str_role_x_userWhereUniqueInput
    /**
     * In case the str_role_x_user found by the `where` argument doesn't exist, create a new str_role_x_user with this data.
     * 
    **/
    create: XOR<str_role_x_userCreateInput, str_role_x_userUncheckedCreateInput>
    /**
     * In case the str_role_x_user was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<str_role_x_userUpdateInput, str_role_x_userUncheckedUpdateInput>
  }


  /**
   * str_role_x_user delete
   */
  export type str_role_x_userDeleteArgs = {
    /**
     * Select specific fields to fetch from the str_role_x_user
     * 
    **/
    select?: str_role_x_userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: str_role_x_userInclude | null
    /**
     * Filter which str_role_x_user to delete.
     * 
    **/
    where: str_role_x_userWhereUniqueInput
  }


  /**
   * str_role_x_user deleteMany
   */
  export type str_role_x_userDeleteManyArgs = {
    where?: str_role_x_userWhereInput
  }


  /**
   * str_role_x_user without action
   */
  export type str_role_x_userArgs = {
    /**
     * Select specific fields to fetch from the str_role_x_user
     * 
    **/
    select?: str_role_x_userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: str_role_x_userInclude | null
  }



  /**
   * Model str_permission_x_role
   */


  export type AggregateStr_permission_x_role = {
    _count: Str_permission_x_roleCountAggregateOutputType | null
    _avg: Str_permission_x_roleAvgAggregateOutputType | null
    _sum: Str_permission_x_roleSumAggregateOutputType | null
    _min: Str_permission_x_roleMinAggregateOutputType | null
    _max: Str_permission_x_roleMaxAggregateOutputType | null
  }

  export type Str_permission_x_roleAvgAggregateOutputType = {
    id: number | null
    id_role: number | null
    id_permission: number | null
    created_by_id: number | null
    updated_by_id: number | null
  }

  export type Str_permission_x_roleSumAggregateOutputType = {
    id: number | null
    id_role: number | null
    id_permission: number | null
    created_by_id: number | null
    updated_by_id: number | null
  }

  export type Str_permission_x_roleMinAggregateOutputType = {
    id: number | null
    id_role: number | null
    id_permission: number | null
    created_at: Date | null
    updated_at: Date | null
    created_by_id: number | null
    updated_by_id: number | null
  }

  export type Str_permission_x_roleMaxAggregateOutputType = {
    id: number | null
    id_role: number | null
    id_permission: number | null
    created_at: Date | null
    updated_at: Date | null
    created_by_id: number | null
    updated_by_id: number | null
  }

  export type Str_permission_x_roleCountAggregateOutputType = {
    id: number
    id_role: number
    id_permission: number
    created_at: number
    updated_at: number
    created_by_id: number
    updated_by_id: number
    _all: number
  }


  export type Str_permission_x_roleAvgAggregateInputType = {
    id?: true
    id_role?: true
    id_permission?: true
    created_by_id?: true
    updated_by_id?: true
  }

  export type Str_permission_x_roleSumAggregateInputType = {
    id?: true
    id_role?: true
    id_permission?: true
    created_by_id?: true
    updated_by_id?: true
  }

  export type Str_permission_x_roleMinAggregateInputType = {
    id?: true
    id_role?: true
    id_permission?: true
    created_at?: true
    updated_at?: true
    created_by_id?: true
    updated_by_id?: true
  }

  export type Str_permission_x_roleMaxAggregateInputType = {
    id?: true
    id_role?: true
    id_permission?: true
    created_at?: true
    updated_at?: true
    created_by_id?: true
    updated_by_id?: true
  }

  export type Str_permission_x_roleCountAggregateInputType = {
    id?: true
    id_role?: true
    id_permission?: true
    created_at?: true
    updated_at?: true
    created_by_id?: true
    updated_by_id?: true
    _all?: true
  }

  export type Str_permission_x_roleAggregateArgs = {
    /**
     * Filter which str_permission_x_role to aggregate.
     * 
    **/
    where?: str_permission_x_roleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of str_permission_x_roles to fetch.
     * 
    **/
    orderBy?: Enumerable<str_permission_x_roleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: str_permission_x_roleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` str_permission_x_roles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` str_permission_x_roles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned str_permission_x_roles
    **/
    _count?: true | Str_permission_x_roleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Str_permission_x_roleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Str_permission_x_roleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Str_permission_x_roleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Str_permission_x_roleMaxAggregateInputType
  }

  export type GetStr_permission_x_roleAggregateType<T extends Str_permission_x_roleAggregateArgs> = {
        [P in keyof T & keyof AggregateStr_permission_x_role]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStr_permission_x_role[P]>
      : GetScalarType<T[P], AggregateStr_permission_x_role[P]>
  }


    
    
  export type Str_permission_x_roleGroupByArgs = {
    where?: str_permission_x_roleWhereInput
    orderBy?: Enumerable<str_permission_x_roleOrderByWithAggregationInput>
    by: Array<Str_permission_x_roleScalarFieldEnum>
    having?: str_permission_x_roleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Str_permission_x_roleCountAggregateInputType | true
    _avg?: Str_permission_x_roleAvgAggregateInputType
    _sum?: Str_permission_x_roleSumAggregateInputType
    _min?: Str_permission_x_roleMinAggregateInputType
    _max?: Str_permission_x_roleMaxAggregateInputType
  }


  export type Str_permission_x_roleGroupByOutputType = {
    id: number
    id_role: number
    id_permission: number
    created_at: Date
    updated_at: Date
    created_by_id: number
    updated_by_id: number
    _count: Str_permission_x_roleCountAggregateOutputType | null
    _avg: Str_permission_x_roleAvgAggregateOutputType | null
    _sum: Str_permission_x_roleSumAggregateOutputType | null
    _min: Str_permission_x_roleMinAggregateOutputType | null
    _max: Str_permission_x_roleMaxAggregateOutputType | null
  }

  type GetStr_permission_x_roleGroupByPayload<T extends Str_permission_x_roleGroupByArgs> = Promise<
    Array<
      PickArray<Str_permission_x_roleGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof Str_permission_x_roleGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], Str_permission_x_roleGroupByOutputType[P]> 
            : GetScalarType<T[P], Str_permission_x_roleGroupByOutputType[P]>
        }
      > 
    >


  export type str_permission_x_roleSelect = {
    id?: boolean
    role?: boolean | str_roleArgs
    permission?: boolean | str_permissionArgs
    id_role?: boolean
    id_permission?: boolean
    created_at?: boolean
    updated_at?: boolean
    created_by_id?: boolean
    updated_by_id?: boolean
  }

  export type str_permission_x_roleInclude = {
    role?: boolean | str_roleArgs
    permission?: boolean | str_permissionArgs
  }

  export type str_permission_x_roleGetPayload<
    S extends boolean | null | undefined | str_permission_x_roleArgs,
    U = keyof S
      > = S extends true
        ? str_permission_x_role
    : S extends undefined
    ? never
    : S extends str_permission_x_roleArgs | str_permission_x_roleFindManyArgs
    ?'include' extends U
    ? str_permission_x_role  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'role'
        ? str_roleGetPayload<S['include'][P]> :
        P extends 'permission'
        ? str_permissionGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof str_permission_x_role ?str_permission_x_role [P]
  : 
          P extends 'role'
        ? str_roleGetPayload<S['select'][P]> :
        P extends 'permission'
        ? str_permissionGetPayload<S['select'][P]> : never
  } 
    : str_permission_x_role
  : str_permission_x_role


  type str_permission_x_roleCountArgs = Merge<
    Omit<str_permission_x_roleFindManyArgs, 'select' | 'include'> & {
      select?: Str_permission_x_roleCountAggregateInputType | true
    }
  >

  export interface str_permission_x_roleDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Str_permission_x_role that matches the filter.
     * @param {str_permission_x_roleFindUniqueArgs} args - Arguments to find a Str_permission_x_role
     * @example
     * // Get one Str_permission_x_role
     * const str_permission_x_role = await prisma.str_permission_x_role.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends str_permission_x_roleFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, str_permission_x_roleFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'str_permission_x_role'> extends True ? CheckSelect<T, Prisma__str_permission_x_roleClient<str_permission_x_role>, Prisma__str_permission_x_roleClient<str_permission_x_roleGetPayload<T>>> : CheckSelect<T, Prisma__str_permission_x_roleClient<str_permission_x_role | null >, Prisma__str_permission_x_roleClient<str_permission_x_roleGetPayload<T> | null >>

    /**
     * Find the first Str_permission_x_role that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {str_permission_x_roleFindFirstArgs} args - Arguments to find a Str_permission_x_role
     * @example
     * // Get one Str_permission_x_role
     * const str_permission_x_role = await prisma.str_permission_x_role.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends str_permission_x_roleFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, str_permission_x_roleFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'str_permission_x_role'> extends True ? CheckSelect<T, Prisma__str_permission_x_roleClient<str_permission_x_role>, Prisma__str_permission_x_roleClient<str_permission_x_roleGetPayload<T>>> : CheckSelect<T, Prisma__str_permission_x_roleClient<str_permission_x_role | null >, Prisma__str_permission_x_roleClient<str_permission_x_roleGetPayload<T> | null >>

    /**
     * Find zero or more Str_permission_x_roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {str_permission_x_roleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Str_permission_x_roles
     * const str_permission_x_roles = await prisma.str_permission_x_role.findMany()
     * 
     * // Get first 10 Str_permission_x_roles
     * const str_permission_x_roles = await prisma.str_permission_x_role.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const str_permission_x_roleWithIdOnly = await prisma.str_permission_x_role.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends str_permission_x_roleFindManyArgs>(
      args?: SelectSubset<T, str_permission_x_roleFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<str_permission_x_role>>, PrismaPromise<Array<str_permission_x_roleGetPayload<T>>>>

    /**
     * Create a Str_permission_x_role.
     * @param {str_permission_x_roleCreateArgs} args - Arguments to create a Str_permission_x_role.
     * @example
     * // Create one Str_permission_x_role
     * const Str_permission_x_role = await prisma.str_permission_x_role.create({
     *   data: {
     *     // ... data to create a Str_permission_x_role
     *   }
     * })
     * 
    **/
    create<T extends str_permission_x_roleCreateArgs>(
      args: SelectSubset<T, str_permission_x_roleCreateArgs>
    ): CheckSelect<T, Prisma__str_permission_x_roleClient<str_permission_x_role>, Prisma__str_permission_x_roleClient<str_permission_x_roleGetPayload<T>>>

    /**
     * Create many Str_permission_x_roles.
     *     @param {str_permission_x_roleCreateManyArgs} args - Arguments to create many Str_permission_x_roles.
     *     @example
     *     // Create many Str_permission_x_roles
     *     const str_permission_x_role = await prisma.str_permission_x_role.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends str_permission_x_roleCreateManyArgs>(
      args?: SelectSubset<T, str_permission_x_roleCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Str_permission_x_role.
     * @param {str_permission_x_roleDeleteArgs} args - Arguments to delete one Str_permission_x_role.
     * @example
     * // Delete one Str_permission_x_role
     * const Str_permission_x_role = await prisma.str_permission_x_role.delete({
     *   where: {
     *     // ... filter to delete one Str_permission_x_role
     *   }
     * })
     * 
    **/
    delete<T extends str_permission_x_roleDeleteArgs>(
      args: SelectSubset<T, str_permission_x_roleDeleteArgs>
    ): CheckSelect<T, Prisma__str_permission_x_roleClient<str_permission_x_role>, Prisma__str_permission_x_roleClient<str_permission_x_roleGetPayload<T>>>

    /**
     * Update one Str_permission_x_role.
     * @param {str_permission_x_roleUpdateArgs} args - Arguments to update one Str_permission_x_role.
     * @example
     * // Update one Str_permission_x_role
     * const str_permission_x_role = await prisma.str_permission_x_role.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends str_permission_x_roleUpdateArgs>(
      args: SelectSubset<T, str_permission_x_roleUpdateArgs>
    ): CheckSelect<T, Prisma__str_permission_x_roleClient<str_permission_x_role>, Prisma__str_permission_x_roleClient<str_permission_x_roleGetPayload<T>>>

    /**
     * Delete zero or more Str_permission_x_roles.
     * @param {str_permission_x_roleDeleteManyArgs} args - Arguments to filter Str_permission_x_roles to delete.
     * @example
     * // Delete a few Str_permission_x_roles
     * const { count } = await prisma.str_permission_x_role.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends str_permission_x_roleDeleteManyArgs>(
      args?: SelectSubset<T, str_permission_x_roleDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Str_permission_x_roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {str_permission_x_roleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Str_permission_x_roles
     * const str_permission_x_role = await prisma.str_permission_x_role.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends str_permission_x_roleUpdateManyArgs>(
      args: SelectSubset<T, str_permission_x_roleUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Str_permission_x_role.
     * @param {str_permission_x_roleUpsertArgs} args - Arguments to update or create a Str_permission_x_role.
     * @example
     * // Update or create a Str_permission_x_role
     * const str_permission_x_role = await prisma.str_permission_x_role.upsert({
     *   create: {
     *     // ... data to create a Str_permission_x_role
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Str_permission_x_role we want to update
     *   }
     * })
    **/
    upsert<T extends str_permission_x_roleUpsertArgs>(
      args: SelectSubset<T, str_permission_x_roleUpsertArgs>
    ): CheckSelect<T, Prisma__str_permission_x_roleClient<str_permission_x_role>, Prisma__str_permission_x_roleClient<str_permission_x_roleGetPayload<T>>>

    /**
     * Count the number of Str_permission_x_roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {str_permission_x_roleCountArgs} args - Arguments to filter Str_permission_x_roles to count.
     * @example
     * // Count the number of Str_permission_x_roles
     * const count = await prisma.str_permission_x_role.count({
     *   where: {
     *     // ... the filter for the Str_permission_x_roles we want to count
     *   }
     * })
    **/
    count<T extends str_permission_x_roleCountArgs>(
      args?: Subset<T, str_permission_x_roleCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Str_permission_x_roleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Str_permission_x_role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Str_permission_x_roleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Str_permission_x_roleAggregateArgs>(args: Subset<T, Str_permission_x_roleAggregateArgs>): PrismaPromise<GetStr_permission_x_roleAggregateType<T>>

    /**
     * Group by Str_permission_x_role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Str_permission_x_roleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Str_permission_x_roleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Str_permission_x_roleGroupByArgs['orderBy'] }
        : { orderBy?: Str_permission_x_roleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Str_permission_x_roleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStr_permission_x_roleGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for str_permission_x_role.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__str_permission_x_roleClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    role<T extends str_roleArgs = {}>(args?: Subset<T, str_roleArgs>): CheckSelect<T, Prisma__str_roleClient<str_role | null >, Prisma__str_roleClient<str_roleGetPayload<T> | null >>;

    permission<T extends str_permissionArgs = {}>(args?: Subset<T, str_permissionArgs>): CheckSelect<T, Prisma__str_permissionClient<str_permission | null >, Prisma__str_permissionClient<str_permissionGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * str_permission_x_role findUnique
   */
  export type str_permission_x_roleFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the str_permission_x_role
     * 
    **/
    select?: str_permission_x_roleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: str_permission_x_roleInclude | null
    /**
     * Throw an Error if a str_permission_x_role can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which str_permission_x_role to fetch.
     * 
    **/
    where: str_permission_x_roleWhereUniqueInput
  }


  /**
   * str_permission_x_role findFirst
   */
  export type str_permission_x_roleFindFirstArgs = {
    /**
     * Select specific fields to fetch from the str_permission_x_role
     * 
    **/
    select?: str_permission_x_roleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: str_permission_x_roleInclude | null
    /**
     * Throw an Error if a str_permission_x_role can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which str_permission_x_role to fetch.
     * 
    **/
    where?: str_permission_x_roleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of str_permission_x_roles to fetch.
     * 
    **/
    orderBy?: Enumerable<str_permission_x_roleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for str_permission_x_roles.
     * 
    **/
    cursor?: str_permission_x_roleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` str_permission_x_roles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` str_permission_x_roles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of str_permission_x_roles.
     * 
    **/
    distinct?: Enumerable<Str_permission_x_roleScalarFieldEnum>
  }


  /**
   * str_permission_x_role findMany
   */
  export type str_permission_x_roleFindManyArgs = {
    /**
     * Select specific fields to fetch from the str_permission_x_role
     * 
    **/
    select?: str_permission_x_roleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: str_permission_x_roleInclude | null
    /**
     * Filter, which str_permission_x_roles to fetch.
     * 
    **/
    where?: str_permission_x_roleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of str_permission_x_roles to fetch.
     * 
    **/
    orderBy?: Enumerable<str_permission_x_roleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing str_permission_x_roles.
     * 
    **/
    cursor?: str_permission_x_roleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` str_permission_x_roles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` str_permission_x_roles.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Str_permission_x_roleScalarFieldEnum>
  }


  /**
   * str_permission_x_role create
   */
  export type str_permission_x_roleCreateArgs = {
    /**
     * Select specific fields to fetch from the str_permission_x_role
     * 
    **/
    select?: str_permission_x_roleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: str_permission_x_roleInclude | null
    /**
     * The data needed to create a str_permission_x_role.
     * 
    **/
    data: XOR<str_permission_x_roleCreateInput, str_permission_x_roleUncheckedCreateInput>
  }


  /**
   * str_permission_x_role createMany
   */
  export type str_permission_x_roleCreateManyArgs = {
    data: Enumerable<str_permission_x_roleCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * str_permission_x_role update
   */
  export type str_permission_x_roleUpdateArgs = {
    /**
     * Select specific fields to fetch from the str_permission_x_role
     * 
    **/
    select?: str_permission_x_roleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: str_permission_x_roleInclude | null
    /**
     * The data needed to update a str_permission_x_role.
     * 
    **/
    data: XOR<str_permission_x_roleUpdateInput, str_permission_x_roleUncheckedUpdateInput>
    /**
     * Choose, which str_permission_x_role to update.
     * 
    **/
    where: str_permission_x_roleWhereUniqueInput
  }


  /**
   * str_permission_x_role updateMany
   */
  export type str_permission_x_roleUpdateManyArgs = {
    data: XOR<str_permission_x_roleUpdateManyMutationInput, str_permission_x_roleUncheckedUpdateManyInput>
    where?: str_permission_x_roleWhereInput
  }


  /**
   * str_permission_x_role upsert
   */
  export type str_permission_x_roleUpsertArgs = {
    /**
     * Select specific fields to fetch from the str_permission_x_role
     * 
    **/
    select?: str_permission_x_roleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: str_permission_x_roleInclude | null
    /**
     * The filter to search for the str_permission_x_role to update in case it exists.
     * 
    **/
    where: str_permission_x_roleWhereUniqueInput
    /**
     * In case the str_permission_x_role found by the `where` argument doesn't exist, create a new str_permission_x_role with this data.
     * 
    **/
    create: XOR<str_permission_x_roleCreateInput, str_permission_x_roleUncheckedCreateInput>
    /**
     * In case the str_permission_x_role was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<str_permission_x_roleUpdateInput, str_permission_x_roleUncheckedUpdateInput>
  }


  /**
   * str_permission_x_role delete
   */
  export type str_permission_x_roleDeleteArgs = {
    /**
     * Select specific fields to fetch from the str_permission_x_role
     * 
    **/
    select?: str_permission_x_roleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: str_permission_x_roleInclude | null
    /**
     * Filter which str_permission_x_role to delete.
     * 
    **/
    where: str_permission_x_roleWhereUniqueInput
  }


  /**
   * str_permission_x_role deleteMany
   */
  export type str_permission_x_roleDeleteManyArgs = {
    where?: str_permission_x_roleWhereInput
  }


  /**
   * str_permission_x_role without action
   */
  export type str_permission_x_roleArgs = {
    /**
     * Select specific fields to fetch from the str_permission_x_role
     * 
    **/
    select?: str_permission_x_roleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: str_permission_x_roleInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const Str_userScalarFieldEnum: {
    id: 'id',
    username: 'username',
    password: 'password',
    firts_name: 'firts_name',
    last_name: 'last_name',
    email: 'email',
    birth_date: 'birth_date'
  };

  export type Str_userScalarFieldEnum = (typeof Str_userScalarFieldEnum)[keyof typeof Str_userScalarFieldEnum]


  export const Str_roleScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description'
  };

  export type Str_roleScalarFieldEnum = (typeof Str_roleScalarFieldEnum)[keyof typeof Str_roleScalarFieldEnum]


  export const Str_permissionScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description'
  };

  export type Str_permissionScalarFieldEnum = (typeof Str_permissionScalarFieldEnum)[keyof typeof Str_permissionScalarFieldEnum]


  export const Str_role_x_userScalarFieldEnum: {
    id: 'id',
    id_role: 'id_role',
    id_user: 'id_user',
    created_at: 'created_at',
    updated_at: 'updated_at',
    created_by_id: 'created_by_id',
    updated_by_id: 'updated_by_id'
  };

  export type Str_role_x_userScalarFieldEnum = (typeof Str_role_x_userScalarFieldEnum)[keyof typeof Str_role_x_userScalarFieldEnum]


  export const Str_permission_x_roleScalarFieldEnum: {
    id: 'id',
    id_role: 'id_role',
    id_permission: 'id_permission',
    created_at: 'created_at',
    updated_at: 'updated_at',
    created_by_id: 'created_by_id',
    updated_by_id: 'updated_by_id'
  };

  export type Str_permission_x_roleScalarFieldEnum = (typeof Str_permission_x_roleScalarFieldEnum)[keyof typeof Str_permission_x_roleScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type str_userWhereInput = {
    AND?: Enumerable<str_userWhereInput>
    OR?: Enumerable<str_userWhereInput>
    NOT?: Enumerable<str_userWhereInput>
    id?: IntFilter | number
    username?: StringFilter | string
    password?: StringFilter | string
    firts_name?: StringFilter | string
    last_name?: StringFilter | string
    email?: StringFilter | string
    birth_date?: DateTimeFilter | Date | string
    roles?: Str_role_x_userListRelationFilter
  }

  export type str_userOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    firts_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    birth_date?: SortOrder
    roles?: str_role_x_userOrderByRelationAggregateInput
  }

  export type str_userWhereUniqueInput = {
    id?: number
    username?: string
    email?: string
  }

  export type str_userOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    firts_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    birth_date?: SortOrder
    _count?: str_userCountOrderByAggregateInput
    _avg?: str_userAvgOrderByAggregateInput
    _max?: str_userMaxOrderByAggregateInput
    _min?: str_userMinOrderByAggregateInput
    _sum?: str_userSumOrderByAggregateInput
  }

  export type str_userScalarWhereWithAggregatesInput = {
    AND?: Enumerable<str_userScalarWhereWithAggregatesInput>
    OR?: Enumerable<str_userScalarWhereWithAggregatesInput>
    NOT?: Enumerable<str_userScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    username?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    firts_name?: StringWithAggregatesFilter | string
    last_name?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    birth_date?: DateTimeWithAggregatesFilter | Date | string
  }

  export type str_roleWhereInput = {
    AND?: Enumerable<str_roleWhereInput>
    OR?: Enumerable<str_roleWhereInput>
    NOT?: Enumerable<str_roleWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    description?: StringFilter | string
    users?: Str_role_x_userListRelationFilter
    permissions?: Str_permission_x_roleListRelationFilter
  }

  export type str_roleOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    users?: str_role_x_userOrderByRelationAggregateInput
    permissions?: str_permission_x_roleOrderByRelationAggregateInput
  }

  export type str_roleWhereUniqueInput = {
    id?: number
    name?: string
  }

  export type str_roleOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    _count?: str_roleCountOrderByAggregateInput
    _avg?: str_roleAvgOrderByAggregateInput
    _max?: str_roleMaxOrderByAggregateInput
    _min?: str_roleMinOrderByAggregateInput
    _sum?: str_roleSumOrderByAggregateInput
  }

  export type str_roleScalarWhereWithAggregatesInput = {
    AND?: Enumerable<str_roleScalarWhereWithAggregatesInput>
    OR?: Enumerable<str_roleScalarWhereWithAggregatesInput>
    NOT?: Enumerable<str_roleScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
  }

  export type str_permissionWhereInput = {
    AND?: Enumerable<str_permissionWhereInput>
    OR?: Enumerable<str_permissionWhereInput>
    NOT?: Enumerable<str_permissionWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    description?: StringFilter | string
    roles?: Str_permission_x_roleListRelationFilter
  }

  export type str_permissionOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    roles?: str_permission_x_roleOrderByRelationAggregateInput
  }

  export type str_permissionWhereUniqueInput = {
    id?: number
  }

  export type str_permissionOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    _count?: str_permissionCountOrderByAggregateInput
    _avg?: str_permissionAvgOrderByAggregateInput
    _max?: str_permissionMaxOrderByAggregateInput
    _min?: str_permissionMinOrderByAggregateInput
    _sum?: str_permissionSumOrderByAggregateInput
  }

  export type str_permissionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<str_permissionScalarWhereWithAggregatesInput>
    OR?: Enumerable<str_permissionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<str_permissionScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
  }

  export type str_role_x_userWhereInput = {
    AND?: Enumerable<str_role_x_userWhereInput>
    OR?: Enumerable<str_role_x_userWhereInput>
    NOT?: Enumerable<str_role_x_userWhereInput>
    id?: IntFilter | number
    user?: XOR<Str_userRelationFilter, str_userWhereInput>
    role?: XOR<Str_roleRelationFilter, str_roleWhereInput>
    id_role?: IntFilter | number
    id_user?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    created_by_id?: IntFilter | number
    updated_by_id?: IntFilter | number
  }

  export type str_role_x_userOrderByWithRelationInput = {
    id?: SortOrder
    user?: str_userOrderByWithRelationInput
    role?: str_roleOrderByWithRelationInput
    id_role?: SortOrder
    id_user?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by_id?: SortOrder
    updated_by_id?: SortOrder
  }

  export type str_role_x_userWhereUniqueInput = {
    id?: number
  }

  export type str_role_x_userOrderByWithAggregationInput = {
    id?: SortOrder
    id_role?: SortOrder
    id_user?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by_id?: SortOrder
    updated_by_id?: SortOrder
    _count?: str_role_x_userCountOrderByAggregateInput
    _avg?: str_role_x_userAvgOrderByAggregateInput
    _max?: str_role_x_userMaxOrderByAggregateInput
    _min?: str_role_x_userMinOrderByAggregateInput
    _sum?: str_role_x_userSumOrderByAggregateInput
  }

  export type str_role_x_userScalarWhereWithAggregatesInput = {
    AND?: Enumerable<str_role_x_userScalarWhereWithAggregatesInput>
    OR?: Enumerable<str_role_x_userScalarWhereWithAggregatesInput>
    NOT?: Enumerable<str_role_x_userScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    id_role?: IntWithAggregatesFilter | number
    id_user?: IntWithAggregatesFilter | number
    created_at?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeWithAggregatesFilter | Date | string
    created_by_id?: IntWithAggregatesFilter | number
    updated_by_id?: IntWithAggregatesFilter | number
  }

  export type str_permission_x_roleWhereInput = {
    AND?: Enumerable<str_permission_x_roleWhereInput>
    OR?: Enumerable<str_permission_x_roleWhereInput>
    NOT?: Enumerable<str_permission_x_roleWhereInput>
    id?: IntFilter | number
    role?: XOR<Str_roleRelationFilter, str_roleWhereInput>
    permission?: XOR<Str_permissionRelationFilter, str_permissionWhereInput>
    id_role?: IntFilter | number
    id_permission?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    created_by_id?: IntFilter | number
    updated_by_id?: IntFilter | number
  }

  export type str_permission_x_roleOrderByWithRelationInput = {
    id?: SortOrder
    role?: str_roleOrderByWithRelationInput
    permission?: str_permissionOrderByWithRelationInput
    id_role?: SortOrder
    id_permission?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by_id?: SortOrder
    updated_by_id?: SortOrder
  }

  export type str_permission_x_roleWhereUniqueInput = {
    id?: number
  }

  export type str_permission_x_roleOrderByWithAggregationInput = {
    id?: SortOrder
    id_role?: SortOrder
    id_permission?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by_id?: SortOrder
    updated_by_id?: SortOrder
    _count?: str_permission_x_roleCountOrderByAggregateInput
    _avg?: str_permission_x_roleAvgOrderByAggregateInput
    _max?: str_permission_x_roleMaxOrderByAggregateInput
    _min?: str_permission_x_roleMinOrderByAggregateInput
    _sum?: str_permission_x_roleSumOrderByAggregateInput
  }

  export type str_permission_x_roleScalarWhereWithAggregatesInput = {
    AND?: Enumerable<str_permission_x_roleScalarWhereWithAggregatesInput>
    OR?: Enumerable<str_permission_x_roleScalarWhereWithAggregatesInput>
    NOT?: Enumerable<str_permission_x_roleScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    id_role?: IntWithAggregatesFilter | number
    id_permission?: IntWithAggregatesFilter | number
    created_at?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeWithAggregatesFilter | Date | string
    created_by_id?: IntWithAggregatesFilter | number
    updated_by_id?: IntWithAggregatesFilter | number
  }

  export type str_userCreateInput = {
    username: string
    password: string
    firts_name: string
    last_name: string
    email: string
    birth_date: Date | string
    roles?: str_role_x_userCreateNestedManyWithoutUserInput
  }

  export type str_userUncheckedCreateInput = {
    id?: number
    username: string
    password: string
    firts_name: string
    last_name: string
    email: string
    birth_date: Date | string
    roles?: str_role_x_userUncheckedCreateNestedManyWithoutUserInput
  }

  export type str_userUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firts_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    roles?: str_role_x_userUpdateManyWithoutUserInput
  }

  export type str_userUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firts_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
    roles?: str_role_x_userUncheckedUpdateManyWithoutUserInput
  }

  export type str_userCreateManyInput = {
    id?: number
    username: string
    password: string
    firts_name: string
    last_name: string
    email: string
    birth_date: Date | string
  }

  export type str_userUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firts_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type str_userUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firts_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type str_roleCreateInput = {
    name: string
    description: string
    users?: str_role_x_userCreateNestedManyWithoutRoleInput
    permissions?: str_permission_x_roleCreateNestedManyWithoutRoleInput
  }

  export type str_roleUncheckedCreateInput = {
    id?: number
    name: string
    description: string
    users?: str_role_x_userUncheckedCreateNestedManyWithoutRoleInput
    permissions?: str_permission_x_roleUncheckedCreateNestedManyWithoutRoleInput
  }

  export type str_roleUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    users?: str_role_x_userUpdateManyWithoutRoleInput
    permissions?: str_permission_x_roleUpdateManyWithoutRoleInput
  }

  export type str_roleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    users?: str_role_x_userUncheckedUpdateManyWithoutRoleInput
    permissions?: str_permission_x_roleUncheckedUpdateManyWithoutRoleInput
  }

  export type str_roleCreateManyInput = {
    id?: number
    name: string
    description: string
  }

  export type str_roleUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type str_roleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type str_permissionCreateInput = {
    name: string
    description: string
    roles?: str_permission_x_roleCreateNestedManyWithoutPermissionInput
  }

  export type str_permissionUncheckedCreateInput = {
    id?: number
    name: string
    description: string
    roles?: str_permission_x_roleUncheckedCreateNestedManyWithoutPermissionInput
  }

  export type str_permissionUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    roles?: str_permission_x_roleUpdateManyWithoutPermissionInput
  }

  export type str_permissionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    roles?: str_permission_x_roleUncheckedUpdateManyWithoutPermissionInput
  }

  export type str_permissionCreateManyInput = {
    id?: number
    name: string
    description: string
  }

  export type str_permissionUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type str_permissionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type str_role_x_userCreateInput = {
    created_at: Date | string
    updated_at: Date | string
    created_by_id: number
    updated_by_id: number
    user: str_userCreateNestedOneWithoutRolesInput
    role: str_roleCreateNestedOneWithoutUsersInput
  }

  export type str_role_x_userUncheckedCreateInput = {
    id?: number
    id_role: number
    id_user: number
    created_at: Date | string
    updated_at: Date | string
    created_by_id: number
    updated_by_id: number
  }

  export type str_role_x_userUpdateInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by_id?: IntFieldUpdateOperationsInput | number
    updated_by_id?: IntFieldUpdateOperationsInput | number
    user?: str_userUpdateOneRequiredWithoutRolesInput
    role?: str_roleUpdateOneRequiredWithoutUsersInput
  }

  export type str_role_x_userUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_role?: IntFieldUpdateOperationsInput | number
    id_user?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by_id?: IntFieldUpdateOperationsInput | number
    updated_by_id?: IntFieldUpdateOperationsInput | number
  }

  export type str_role_x_userCreateManyInput = {
    id?: number
    id_role: number
    id_user: number
    created_at: Date | string
    updated_at: Date | string
    created_by_id: number
    updated_by_id: number
  }

  export type str_role_x_userUpdateManyMutationInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by_id?: IntFieldUpdateOperationsInput | number
    updated_by_id?: IntFieldUpdateOperationsInput | number
  }

  export type str_role_x_userUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_role?: IntFieldUpdateOperationsInput | number
    id_user?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by_id?: IntFieldUpdateOperationsInput | number
    updated_by_id?: IntFieldUpdateOperationsInput | number
  }

  export type str_permission_x_roleCreateInput = {
    created_at: Date | string
    updated_at: Date | string
    created_by_id: number
    updated_by_id: number
    role: str_roleCreateNestedOneWithoutPermissionsInput
    permission: str_permissionCreateNestedOneWithoutRolesInput
  }

  export type str_permission_x_roleUncheckedCreateInput = {
    id?: number
    id_role: number
    id_permission: number
    created_at: Date | string
    updated_at: Date | string
    created_by_id: number
    updated_by_id: number
  }

  export type str_permission_x_roleUpdateInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by_id?: IntFieldUpdateOperationsInput | number
    updated_by_id?: IntFieldUpdateOperationsInput | number
    role?: str_roleUpdateOneRequiredWithoutPermissionsInput
    permission?: str_permissionUpdateOneRequiredWithoutRolesInput
  }

  export type str_permission_x_roleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_role?: IntFieldUpdateOperationsInput | number
    id_permission?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by_id?: IntFieldUpdateOperationsInput | number
    updated_by_id?: IntFieldUpdateOperationsInput | number
  }

  export type str_permission_x_roleCreateManyInput = {
    id?: number
    id_role: number
    id_permission: number
    created_at: Date | string
    updated_at: Date | string
    created_by_id: number
    updated_by_id: number
  }

  export type str_permission_x_roleUpdateManyMutationInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by_id?: IntFieldUpdateOperationsInput | number
    updated_by_id?: IntFieldUpdateOperationsInput | number
  }

  export type str_permission_x_roleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_role?: IntFieldUpdateOperationsInput | number
    id_permission?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by_id?: IntFieldUpdateOperationsInput | number
    updated_by_id?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type Str_role_x_userListRelationFilter = {
    every?: str_role_x_userWhereInput
    some?: str_role_x_userWhereInput
    none?: str_role_x_userWhereInput
  }

  export type str_role_x_userOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type str_userCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    firts_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    birth_date?: SortOrder
  }

  export type str_userAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type str_userMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    firts_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    birth_date?: SortOrder
  }

  export type str_userMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    firts_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    birth_date?: SortOrder
  }

  export type str_userSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type Str_permission_x_roleListRelationFilter = {
    every?: str_permission_x_roleWhereInput
    some?: str_permission_x_roleWhereInput
    none?: str_permission_x_roleWhereInput
  }

  export type str_permission_x_roleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type str_roleCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type str_roleAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type str_roleMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type str_roleMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type str_roleSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type str_permissionCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type str_permissionAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type str_permissionMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type str_permissionMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type str_permissionSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type Str_userRelationFilter = {
    is?: str_userWhereInput
    isNot?: str_userWhereInput
  }

  export type Str_roleRelationFilter = {
    is?: str_roleWhereInput
    isNot?: str_roleWhereInput
  }

  export type str_role_x_userCountOrderByAggregateInput = {
    id?: SortOrder
    id_role?: SortOrder
    id_user?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by_id?: SortOrder
    updated_by_id?: SortOrder
  }

  export type str_role_x_userAvgOrderByAggregateInput = {
    id?: SortOrder
    id_role?: SortOrder
    id_user?: SortOrder
    created_by_id?: SortOrder
    updated_by_id?: SortOrder
  }

  export type str_role_x_userMaxOrderByAggregateInput = {
    id?: SortOrder
    id_role?: SortOrder
    id_user?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by_id?: SortOrder
    updated_by_id?: SortOrder
  }

  export type str_role_x_userMinOrderByAggregateInput = {
    id?: SortOrder
    id_role?: SortOrder
    id_user?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by_id?: SortOrder
    updated_by_id?: SortOrder
  }

  export type str_role_x_userSumOrderByAggregateInput = {
    id?: SortOrder
    id_role?: SortOrder
    id_user?: SortOrder
    created_by_id?: SortOrder
    updated_by_id?: SortOrder
  }

  export type Str_permissionRelationFilter = {
    is?: str_permissionWhereInput
    isNot?: str_permissionWhereInput
  }

  export type str_permission_x_roleCountOrderByAggregateInput = {
    id?: SortOrder
    id_role?: SortOrder
    id_permission?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by_id?: SortOrder
    updated_by_id?: SortOrder
  }

  export type str_permission_x_roleAvgOrderByAggregateInput = {
    id?: SortOrder
    id_role?: SortOrder
    id_permission?: SortOrder
    created_by_id?: SortOrder
    updated_by_id?: SortOrder
  }

  export type str_permission_x_roleMaxOrderByAggregateInput = {
    id?: SortOrder
    id_role?: SortOrder
    id_permission?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by_id?: SortOrder
    updated_by_id?: SortOrder
  }

  export type str_permission_x_roleMinOrderByAggregateInput = {
    id?: SortOrder
    id_role?: SortOrder
    id_permission?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    created_by_id?: SortOrder
    updated_by_id?: SortOrder
  }

  export type str_permission_x_roleSumOrderByAggregateInput = {
    id?: SortOrder
    id_role?: SortOrder
    id_permission?: SortOrder
    created_by_id?: SortOrder
    updated_by_id?: SortOrder
  }

  export type str_role_x_userCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<str_role_x_userCreateWithoutUserInput>, Enumerable<str_role_x_userUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<str_role_x_userCreateOrConnectWithoutUserInput>
    createMany?: str_role_x_userCreateManyUserInputEnvelope
    connect?: Enumerable<str_role_x_userWhereUniqueInput>
  }

  export type str_role_x_userUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<str_role_x_userCreateWithoutUserInput>, Enumerable<str_role_x_userUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<str_role_x_userCreateOrConnectWithoutUserInput>
    createMany?: str_role_x_userCreateManyUserInputEnvelope
    connect?: Enumerable<str_role_x_userWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type str_role_x_userUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<str_role_x_userCreateWithoutUserInput>, Enumerable<str_role_x_userUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<str_role_x_userCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<str_role_x_userUpsertWithWhereUniqueWithoutUserInput>
    createMany?: str_role_x_userCreateManyUserInputEnvelope
    connect?: Enumerable<str_role_x_userWhereUniqueInput>
    set?: Enumerable<str_role_x_userWhereUniqueInput>
    disconnect?: Enumerable<str_role_x_userWhereUniqueInput>
    delete?: Enumerable<str_role_x_userWhereUniqueInput>
    update?: Enumerable<str_role_x_userUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<str_role_x_userUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<str_role_x_userScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type str_role_x_userUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<str_role_x_userCreateWithoutUserInput>, Enumerable<str_role_x_userUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<str_role_x_userCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<str_role_x_userUpsertWithWhereUniqueWithoutUserInput>
    createMany?: str_role_x_userCreateManyUserInputEnvelope
    connect?: Enumerable<str_role_x_userWhereUniqueInput>
    set?: Enumerable<str_role_x_userWhereUniqueInput>
    disconnect?: Enumerable<str_role_x_userWhereUniqueInput>
    delete?: Enumerable<str_role_x_userWhereUniqueInput>
    update?: Enumerable<str_role_x_userUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<str_role_x_userUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<str_role_x_userScalarWhereInput>
  }

  export type str_role_x_userCreateNestedManyWithoutRoleInput = {
    create?: XOR<Enumerable<str_role_x_userCreateWithoutRoleInput>, Enumerable<str_role_x_userUncheckedCreateWithoutRoleInput>>
    connectOrCreate?: Enumerable<str_role_x_userCreateOrConnectWithoutRoleInput>
    createMany?: str_role_x_userCreateManyRoleInputEnvelope
    connect?: Enumerable<str_role_x_userWhereUniqueInput>
  }

  export type str_permission_x_roleCreateNestedManyWithoutRoleInput = {
    create?: XOR<Enumerable<str_permission_x_roleCreateWithoutRoleInput>, Enumerable<str_permission_x_roleUncheckedCreateWithoutRoleInput>>
    connectOrCreate?: Enumerable<str_permission_x_roleCreateOrConnectWithoutRoleInput>
    createMany?: str_permission_x_roleCreateManyRoleInputEnvelope
    connect?: Enumerable<str_permission_x_roleWhereUniqueInput>
  }

  export type str_role_x_userUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<Enumerable<str_role_x_userCreateWithoutRoleInput>, Enumerable<str_role_x_userUncheckedCreateWithoutRoleInput>>
    connectOrCreate?: Enumerable<str_role_x_userCreateOrConnectWithoutRoleInput>
    createMany?: str_role_x_userCreateManyRoleInputEnvelope
    connect?: Enumerable<str_role_x_userWhereUniqueInput>
  }

  export type str_permission_x_roleUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<Enumerable<str_permission_x_roleCreateWithoutRoleInput>, Enumerable<str_permission_x_roleUncheckedCreateWithoutRoleInput>>
    connectOrCreate?: Enumerable<str_permission_x_roleCreateOrConnectWithoutRoleInput>
    createMany?: str_permission_x_roleCreateManyRoleInputEnvelope
    connect?: Enumerable<str_permission_x_roleWhereUniqueInput>
  }

  export type str_role_x_userUpdateManyWithoutRoleInput = {
    create?: XOR<Enumerable<str_role_x_userCreateWithoutRoleInput>, Enumerable<str_role_x_userUncheckedCreateWithoutRoleInput>>
    connectOrCreate?: Enumerable<str_role_x_userCreateOrConnectWithoutRoleInput>
    upsert?: Enumerable<str_role_x_userUpsertWithWhereUniqueWithoutRoleInput>
    createMany?: str_role_x_userCreateManyRoleInputEnvelope
    connect?: Enumerable<str_role_x_userWhereUniqueInput>
    set?: Enumerable<str_role_x_userWhereUniqueInput>
    disconnect?: Enumerable<str_role_x_userWhereUniqueInput>
    delete?: Enumerable<str_role_x_userWhereUniqueInput>
    update?: Enumerable<str_role_x_userUpdateWithWhereUniqueWithoutRoleInput>
    updateMany?: Enumerable<str_role_x_userUpdateManyWithWhereWithoutRoleInput>
    deleteMany?: Enumerable<str_role_x_userScalarWhereInput>
  }

  export type str_permission_x_roleUpdateManyWithoutRoleInput = {
    create?: XOR<Enumerable<str_permission_x_roleCreateWithoutRoleInput>, Enumerable<str_permission_x_roleUncheckedCreateWithoutRoleInput>>
    connectOrCreate?: Enumerable<str_permission_x_roleCreateOrConnectWithoutRoleInput>
    upsert?: Enumerable<str_permission_x_roleUpsertWithWhereUniqueWithoutRoleInput>
    createMany?: str_permission_x_roleCreateManyRoleInputEnvelope
    connect?: Enumerable<str_permission_x_roleWhereUniqueInput>
    set?: Enumerable<str_permission_x_roleWhereUniqueInput>
    disconnect?: Enumerable<str_permission_x_roleWhereUniqueInput>
    delete?: Enumerable<str_permission_x_roleWhereUniqueInput>
    update?: Enumerable<str_permission_x_roleUpdateWithWhereUniqueWithoutRoleInput>
    updateMany?: Enumerable<str_permission_x_roleUpdateManyWithWhereWithoutRoleInput>
    deleteMany?: Enumerable<str_permission_x_roleScalarWhereInput>
  }

  export type str_role_x_userUncheckedUpdateManyWithoutRoleInput = {
    create?: XOR<Enumerable<str_role_x_userCreateWithoutRoleInput>, Enumerable<str_role_x_userUncheckedCreateWithoutRoleInput>>
    connectOrCreate?: Enumerable<str_role_x_userCreateOrConnectWithoutRoleInput>
    upsert?: Enumerable<str_role_x_userUpsertWithWhereUniqueWithoutRoleInput>
    createMany?: str_role_x_userCreateManyRoleInputEnvelope
    connect?: Enumerable<str_role_x_userWhereUniqueInput>
    set?: Enumerable<str_role_x_userWhereUniqueInput>
    disconnect?: Enumerable<str_role_x_userWhereUniqueInput>
    delete?: Enumerable<str_role_x_userWhereUniqueInput>
    update?: Enumerable<str_role_x_userUpdateWithWhereUniqueWithoutRoleInput>
    updateMany?: Enumerable<str_role_x_userUpdateManyWithWhereWithoutRoleInput>
    deleteMany?: Enumerable<str_role_x_userScalarWhereInput>
  }

  export type str_permission_x_roleUncheckedUpdateManyWithoutRoleInput = {
    create?: XOR<Enumerable<str_permission_x_roleCreateWithoutRoleInput>, Enumerable<str_permission_x_roleUncheckedCreateWithoutRoleInput>>
    connectOrCreate?: Enumerable<str_permission_x_roleCreateOrConnectWithoutRoleInput>
    upsert?: Enumerable<str_permission_x_roleUpsertWithWhereUniqueWithoutRoleInput>
    createMany?: str_permission_x_roleCreateManyRoleInputEnvelope
    connect?: Enumerable<str_permission_x_roleWhereUniqueInput>
    set?: Enumerable<str_permission_x_roleWhereUniqueInput>
    disconnect?: Enumerable<str_permission_x_roleWhereUniqueInput>
    delete?: Enumerable<str_permission_x_roleWhereUniqueInput>
    update?: Enumerable<str_permission_x_roleUpdateWithWhereUniqueWithoutRoleInput>
    updateMany?: Enumerable<str_permission_x_roleUpdateManyWithWhereWithoutRoleInput>
    deleteMany?: Enumerable<str_permission_x_roleScalarWhereInput>
  }

  export type str_permission_x_roleCreateNestedManyWithoutPermissionInput = {
    create?: XOR<Enumerable<str_permission_x_roleCreateWithoutPermissionInput>, Enumerable<str_permission_x_roleUncheckedCreateWithoutPermissionInput>>
    connectOrCreate?: Enumerable<str_permission_x_roleCreateOrConnectWithoutPermissionInput>
    createMany?: str_permission_x_roleCreateManyPermissionInputEnvelope
    connect?: Enumerable<str_permission_x_roleWhereUniqueInput>
  }

  export type str_permission_x_roleUncheckedCreateNestedManyWithoutPermissionInput = {
    create?: XOR<Enumerable<str_permission_x_roleCreateWithoutPermissionInput>, Enumerable<str_permission_x_roleUncheckedCreateWithoutPermissionInput>>
    connectOrCreate?: Enumerable<str_permission_x_roleCreateOrConnectWithoutPermissionInput>
    createMany?: str_permission_x_roleCreateManyPermissionInputEnvelope
    connect?: Enumerable<str_permission_x_roleWhereUniqueInput>
  }

  export type str_permission_x_roleUpdateManyWithoutPermissionInput = {
    create?: XOR<Enumerable<str_permission_x_roleCreateWithoutPermissionInput>, Enumerable<str_permission_x_roleUncheckedCreateWithoutPermissionInput>>
    connectOrCreate?: Enumerable<str_permission_x_roleCreateOrConnectWithoutPermissionInput>
    upsert?: Enumerable<str_permission_x_roleUpsertWithWhereUniqueWithoutPermissionInput>
    createMany?: str_permission_x_roleCreateManyPermissionInputEnvelope
    connect?: Enumerable<str_permission_x_roleWhereUniqueInput>
    set?: Enumerable<str_permission_x_roleWhereUniqueInput>
    disconnect?: Enumerable<str_permission_x_roleWhereUniqueInput>
    delete?: Enumerable<str_permission_x_roleWhereUniqueInput>
    update?: Enumerable<str_permission_x_roleUpdateWithWhereUniqueWithoutPermissionInput>
    updateMany?: Enumerable<str_permission_x_roleUpdateManyWithWhereWithoutPermissionInput>
    deleteMany?: Enumerable<str_permission_x_roleScalarWhereInput>
  }

  export type str_permission_x_roleUncheckedUpdateManyWithoutPermissionInput = {
    create?: XOR<Enumerable<str_permission_x_roleCreateWithoutPermissionInput>, Enumerable<str_permission_x_roleUncheckedCreateWithoutPermissionInput>>
    connectOrCreate?: Enumerable<str_permission_x_roleCreateOrConnectWithoutPermissionInput>
    upsert?: Enumerable<str_permission_x_roleUpsertWithWhereUniqueWithoutPermissionInput>
    createMany?: str_permission_x_roleCreateManyPermissionInputEnvelope
    connect?: Enumerable<str_permission_x_roleWhereUniqueInput>
    set?: Enumerable<str_permission_x_roleWhereUniqueInput>
    disconnect?: Enumerable<str_permission_x_roleWhereUniqueInput>
    delete?: Enumerable<str_permission_x_roleWhereUniqueInput>
    update?: Enumerable<str_permission_x_roleUpdateWithWhereUniqueWithoutPermissionInput>
    updateMany?: Enumerable<str_permission_x_roleUpdateManyWithWhereWithoutPermissionInput>
    deleteMany?: Enumerable<str_permission_x_roleScalarWhereInput>
  }

  export type str_userCreateNestedOneWithoutRolesInput = {
    create?: XOR<str_userCreateWithoutRolesInput, str_userUncheckedCreateWithoutRolesInput>
    connectOrCreate?: str_userCreateOrConnectWithoutRolesInput
    connect?: str_userWhereUniqueInput
  }

  export type str_roleCreateNestedOneWithoutUsersInput = {
    create?: XOR<str_roleCreateWithoutUsersInput, str_roleUncheckedCreateWithoutUsersInput>
    connectOrCreate?: str_roleCreateOrConnectWithoutUsersInput
    connect?: str_roleWhereUniqueInput
  }

  export type str_userUpdateOneRequiredWithoutRolesInput = {
    create?: XOR<str_userCreateWithoutRolesInput, str_userUncheckedCreateWithoutRolesInput>
    connectOrCreate?: str_userCreateOrConnectWithoutRolesInput
    upsert?: str_userUpsertWithoutRolesInput
    connect?: str_userWhereUniqueInput
    update?: XOR<str_userUpdateWithoutRolesInput, str_userUncheckedUpdateWithoutRolesInput>
  }

  export type str_roleUpdateOneRequiredWithoutUsersInput = {
    create?: XOR<str_roleCreateWithoutUsersInput, str_roleUncheckedCreateWithoutUsersInput>
    connectOrCreate?: str_roleCreateOrConnectWithoutUsersInput
    upsert?: str_roleUpsertWithoutUsersInput
    connect?: str_roleWhereUniqueInput
    update?: XOR<str_roleUpdateWithoutUsersInput, str_roleUncheckedUpdateWithoutUsersInput>
  }

  export type str_roleCreateNestedOneWithoutPermissionsInput = {
    create?: XOR<str_roleCreateWithoutPermissionsInput, str_roleUncheckedCreateWithoutPermissionsInput>
    connectOrCreate?: str_roleCreateOrConnectWithoutPermissionsInput
    connect?: str_roleWhereUniqueInput
  }

  export type str_permissionCreateNestedOneWithoutRolesInput = {
    create?: XOR<str_permissionCreateWithoutRolesInput, str_permissionUncheckedCreateWithoutRolesInput>
    connectOrCreate?: str_permissionCreateOrConnectWithoutRolesInput
    connect?: str_permissionWhereUniqueInput
  }

  export type str_roleUpdateOneRequiredWithoutPermissionsInput = {
    create?: XOR<str_roleCreateWithoutPermissionsInput, str_roleUncheckedCreateWithoutPermissionsInput>
    connectOrCreate?: str_roleCreateOrConnectWithoutPermissionsInput
    upsert?: str_roleUpsertWithoutPermissionsInput
    connect?: str_roleWhereUniqueInput
    update?: XOR<str_roleUpdateWithoutPermissionsInput, str_roleUncheckedUpdateWithoutPermissionsInput>
  }

  export type str_permissionUpdateOneRequiredWithoutRolesInput = {
    create?: XOR<str_permissionCreateWithoutRolesInput, str_permissionUncheckedCreateWithoutRolesInput>
    connectOrCreate?: str_permissionCreateOrConnectWithoutRolesInput
    upsert?: str_permissionUpsertWithoutRolesInput
    connect?: str_permissionWhereUniqueInput
    update?: XOR<str_permissionUpdateWithoutRolesInput, str_permissionUncheckedUpdateWithoutRolesInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type str_role_x_userCreateWithoutUserInput = {
    created_at: Date | string
    updated_at: Date | string
    created_by_id: number
    updated_by_id: number
    role: str_roleCreateNestedOneWithoutUsersInput
  }

  export type str_role_x_userUncheckedCreateWithoutUserInput = {
    id?: number
    id_role: number
    created_at: Date | string
    updated_at: Date | string
    created_by_id: number
    updated_by_id: number
  }

  export type str_role_x_userCreateOrConnectWithoutUserInput = {
    where: str_role_x_userWhereUniqueInput
    create: XOR<str_role_x_userCreateWithoutUserInput, str_role_x_userUncheckedCreateWithoutUserInput>
  }

  export type str_role_x_userCreateManyUserInputEnvelope = {
    data: Enumerable<str_role_x_userCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type str_role_x_userUpsertWithWhereUniqueWithoutUserInput = {
    where: str_role_x_userWhereUniqueInput
    update: XOR<str_role_x_userUpdateWithoutUserInput, str_role_x_userUncheckedUpdateWithoutUserInput>
    create: XOR<str_role_x_userCreateWithoutUserInput, str_role_x_userUncheckedCreateWithoutUserInput>
  }

  export type str_role_x_userUpdateWithWhereUniqueWithoutUserInput = {
    where: str_role_x_userWhereUniqueInput
    data: XOR<str_role_x_userUpdateWithoutUserInput, str_role_x_userUncheckedUpdateWithoutUserInput>
  }

  export type str_role_x_userUpdateManyWithWhereWithoutUserInput = {
    where: str_role_x_userScalarWhereInput
    data: XOR<str_role_x_userUpdateManyMutationInput, str_role_x_userUncheckedUpdateManyWithoutRolesInput>
  }

  export type str_role_x_userScalarWhereInput = {
    AND?: Enumerable<str_role_x_userScalarWhereInput>
    OR?: Enumerable<str_role_x_userScalarWhereInput>
    NOT?: Enumerable<str_role_x_userScalarWhereInput>
    id?: IntFilter | number
    id_role?: IntFilter | number
    id_user?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    created_by_id?: IntFilter | number
    updated_by_id?: IntFilter | number
  }

  export type str_role_x_userCreateWithoutRoleInput = {
    created_at: Date | string
    updated_at: Date | string
    created_by_id: number
    updated_by_id: number
    user: str_userCreateNestedOneWithoutRolesInput
  }

  export type str_role_x_userUncheckedCreateWithoutRoleInput = {
    id?: number
    id_user: number
    created_at: Date | string
    updated_at: Date | string
    created_by_id: number
    updated_by_id: number
  }

  export type str_role_x_userCreateOrConnectWithoutRoleInput = {
    where: str_role_x_userWhereUniqueInput
    create: XOR<str_role_x_userCreateWithoutRoleInput, str_role_x_userUncheckedCreateWithoutRoleInput>
  }

  export type str_role_x_userCreateManyRoleInputEnvelope = {
    data: Enumerable<str_role_x_userCreateManyRoleInput>
    skipDuplicates?: boolean
  }

  export type str_permission_x_roleCreateWithoutRoleInput = {
    created_at: Date | string
    updated_at: Date | string
    created_by_id: number
    updated_by_id: number
    permission: str_permissionCreateNestedOneWithoutRolesInput
  }

  export type str_permission_x_roleUncheckedCreateWithoutRoleInput = {
    id?: number
    id_permission: number
    created_at: Date | string
    updated_at: Date | string
    created_by_id: number
    updated_by_id: number
  }

  export type str_permission_x_roleCreateOrConnectWithoutRoleInput = {
    where: str_permission_x_roleWhereUniqueInput
    create: XOR<str_permission_x_roleCreateWithoutRoleInput, str_permission_x_roleUncheckedCreateWithoutRoleInput>
  }

  export type str_permission_x_roleCreateManyRoleInputEnvelope = {
    data: Enumerable<str_permission_x_roleCreateManyRoleInput>
    skipDuplicates?: boolean
  }

  export type str_role_x_userUpsertWithWhereUniqueWithoutRoleInput = {
    where: str_role_x_userWhereUniqueInput
    update: XOR<str_role_x_userUpdateWithoutRoleInput, str_role_x_userUncheckedUpdateWithoutRoleInput>
    create: XOR<str_role_x_userCreateWithoutRoleInput, str_role_x_userUncheckedCreateWithoutRoleInput>
  }

  export type str_role_x_userUpdateWithWhereUniqueWithoutRoleInput = {
    where: str_role_x_userWhereUniqueInput
    data: XOR<str_role_x_userUpdateWithoutRoleInput, str_role_x_userUncheckedUpdateWithoutRoleInput>
  }

  export type str_role_x_userUpdateManyWithWhereWithoutRoleInput = {
    where: str_role_x_userScalarWhereInput
    data: XOR<str_role_x_userUpdateManyMutationInput, str_role_x_userUncheckedUpdateManyWithoutUsersInput>
  }

  export type str_permission_x_roleUpsertWithWhereUniqueWithoutRoleInput = {
    where: str_permission_x_roleWhereUniqueInput
    update: XOR<str_permission_x_roleUpdateWithoutRoleInput, str_permission_x_roleUncheckedUpdateWithoutRoleInput>
    create: XOR<str_permission_x_roleCreateWithoutRoleInput, str_permission_x_roleUncheckedCreateWithoutRoleInput>
  }

  export type str_permission_x_roleUpdateWithWhereUniqueWithoutRoleInput = {
    where: str_permission_x_roleWhereUniqueInput
    data: XOR<str_permission_x_roleUpdateWithoutRoleInput, str_permission_x_roleUncheckedUpdateWithoutRoleInput>
  }

  export type str_permission_x_roleUpdateManyWithWhereWithoutRoleInput = {
    where: str_permission_x_roleScalarWhereInput
    data: XOR<str_permission_x_roleUpdateManyMutationInput, str_permission_x_roleUncheckedUpdateManyWithoutPermissionsInput>
  }

  export type str_permission_x_roleScalarWhereInput = {
    AND?: Enumerable<str_permission_x_roleScalarWhereInput>
    OR?: Enumerable<str_permission_x_roleScalarWhereInput>
    NOT?: Enumerable<str_permission_x_roleScalarWhereInput>
    id?: IntFilter | number
    id_role?: IntFilter | number
    id_permission?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    created_by_id?: IntFilter | number
    updated_by_id?: IntFilter | number
  }

  export type str_permission_x_roleCreateWithoutPermissionInput = {
    created_at: Date | string
    updated_at: Date | string
    created_by_id: number
    updated_by_id: number
    role: str_roleCreateNestedOneWithoutPermissionsInput
  }

  export type str_permission_x_roleUncheckedCreateWithoutPermissionInput = {
    id?: number
    id_role: number
    created_at: Date | string
    updated_at: Date | string
    created_by_id: number
    updated_by_id: number
  }

  export type str_permission_x_roleCreateOrConnectWithoutPermissionInput = {
    where: str_permission_x_roleWhereUniqueInput
    create: XOR<str_permission_x_roleCreateWithoutPermissionInput, str_permission_x_roleUncheckedCreateWithoutPermissionInput>
  }

  export type str_permission_x_roleCreateManyPermissionInputEnvelope = {
    data: Enumerable<str_permission_x_roleCreateManyPermissionInput>
    skipDuplicates?: boolean
  }

  export type str_permission_x_roleUpsertWithWhereUniqueWithoutPermissionInput = {
    where: str_permission_x_roleWhereUniqueInput
    update: XOR<str_permission_x_roleUpdateWithoutPermissionInput, str_permission_x_roleUncheckedUpdateWithoutPermissionInput>
    create: XOR<str_permission_x_roleCreateWithoutPermissionInput, str_permission_x_roleUncheckedCreateWithoutPermissionInput>
  }

  export type str_permission_x_roleUpdateWithWhereUniqueWithoutPermissionInput = {
    where: str_permission_x_roleWhereUniqueInput
    data: XOR<str_permission_x_roleUpdateWithoutPermissionInput, str_permission_x_roleUncheckedUpdateWithoutPermissionInput>
  }

  export type str_permission_x_roleUpdateManyWithWhereWithoutPermissionInput = {
    where: str_permission_x_roleScalarWhereInput
    data: XOR<str_permission_x_roleUpdateManyMutationInput, str_permission_x_roleUncheckedUpdateManyWithoutRolesInput>
  }

  export type str_userCreateWithoutRolesInput = {
    username: string
    password: string
    firts_name: string
    last_name: string
    email: string
    birth_date: Date | string
  }

  export type str_userUncheckedCreateWithoutRolesInput = {
    id?: number
    username: string
    password: string
    firts_name: string
    last_name: string
    email: string
    birth_date: Date | string
  }

  export type str_userCreateOrConnectWithoutRolesInput = {
    where: str_userWhereUniqueInput
    create: XOR<str_userCreateWithoutRolesInput, str_userUncheckedCreateWithoutRolesInput>
  }

  export type str_roleCreateWithoutUsersInput = {
    name: string
    description: string
    permissions?: str_permission_x_roleCreateNestedManyWithoutRoleInput
  }

  export type str_roleUncheckedCreateWithoutUsersInput = {
    id?: number
    name: string
    description: string
    permissions?: str_permission_x_roleUncheckedCreateNestedManyWithoutRoleInput
  }

  export type str_roleCreateOrConnectWithoutUsersInput = {
    where: str_roleWhereUniqueInput
    create: XOR<str_roleCreateWithoutUsersInput, str_roleUncheckedCreateWithoutUsersInput>
  }

  export type str_userUpsertWithoutRolesInput = {
    update: XOR<str_userUpdateWithoutRolesInput, str_userUncheckedUpdateWithoutRolesInput>
    create: XOR<str_userCreateWithoutRolesInput, str_userUncheckedCreateWithoutRolesInput>
  }

  export type str_userUpdateWithoutRolesInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firts_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type str_userUncheckedUpdateWithoutRolesInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firts_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    birth_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type str_roleUpsertWithoutUsersInput = {
    update: XOR<str_roleUpdateWithoutUsersInput, str_roleUncheckedUpdateWithoutUsersInput>
    create: XOR<str_roleCreateWithoutUsersInput, str_roleUncheckedCreateWithoutUsersInput>
  }

  export type str_roleUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    permissions?: str_permission_x_roleUpdateManyWithoutRoleInput
  }

  export type str_roleUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    permissions?: str_permission_x_roleUncheckedUpdateManyWithoutRoleInput
  }

  export type str_roleCreateWithoutPermissionsInput = {
    name: string
    description: string
    users?: str_role_x_userCreateNestedManyWithoutRoleInput
  }

  export type str_roleUncheckedCreateWithoutPermissionsInput = {
    id?: number
    name: string
    description: string
    users?: str_role_x_userUncheckedCreateNestedManyWithoutRoleInput
  }

  export type str_roleCreateOrConnectWithoutPermissionsInput = {
    where: str_roleWhereUniqueInput
    create: XOR<str_roleCreateWithoutPermissionsInput, str_roleUncheckedCreateWithoutPermissionsInput>
  }

  export type str_permissionCreateWithoutRolesInput = {
    name: string
    description: string
  }

  export type str_permissionUncheckedCreateWithoutRolesInput = {
    id?: number
    name: string
    description: string
  }

  export type str_permissionCreateOrConnectWithoutRolesInput = {
    where: str_permissionWhereUniqueInput
    create: XOR<str_permissionCreateWithoutRolesInput, str_permissionUncheckedCreateWithoutRolesInput>
  }

  export type str_roleUpsertWithoutPermissionsInput = {
    update: XOR<str_roleUpdateWithoutPermissionsInput, str_roleUncheckedUpdateWithoutPermissionsInput>
    create: XOR<str_roleCreateWithoutPermissionsInput, str_roleUncheckedCreateWithoutPermissionsInput>
  }

  export type str_roleUpdateWithoutPermissionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    users?: str_role_x_userUpdateManyWithoutRoleInput
  }

  export type str_roleUncheckedUpdateWithoutPermissionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    users?: str_role_x_userUncheckedUpdateManyWithoutRoleInput
  }

  export type str_permissionUpsertWithoutRolesInput = {
    update: XOR<str_permissionUpdateWithoutRolesInput, str_permissionUncheckedUpdateWithoutRolesInput>
    create: XOR<str_permissionCreateWithoutRolesInput, str_permissionUncheckedCreateWithoutRolesInput>
  }

  export type str_permissionUpdateWithoutRolesInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type str_permissionUncheckedUpdateWithoutRolesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type str_role_x_userCreateManyUserInput = {
    id?: number
    id_role: number
    created_at: Date | string
    updated_at: Date | string
    created_by_id: number
    updated_by_id: number
  }

  export type str_role_x_userUpdateWithoutUserInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by_id?: IntFieldUpdateOperationsInput | number
    updated_by_id?: IntFieldUpdateOperationsInput | number
    role?: str_roleUpdateOneRequiredWithoutUsersInput
  }

  export type str_role_x_userUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_role?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by_id?: IntFieldUpdateOperationsInput | number
    updated_by_id?: IntFieldUpdateOperationsInput | number
  }

  export type str_role_x_userUncheckedUpdateManyWithoutRolesInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_role?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by_id?: IntFieldUpdateOperationsInput | number
    updated_by_id?: IntFieldUpdateOperationsInput | number
  }

  export type str_role_x_userCreateManyRoleInput = {
    id?: number
    id_user: number
    created_at: Date | string
    updated_at: Date | string
    created_by_id: number
    updated_by_id: number
  }

  export type str_permission_x_roleCreateManyRoleInput = {
    id?: number
    id_permission: number
    created_at: Date | string
    updated_at: Date | string
    created_by_id: number
    updated_by_id: number
  }

  export type str_role_x_userUpdateWithoutRoleInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by_id?: IntFieldUpdateOperationsInput | number
    updated_by_id?: IntFieldUpdateOperationsInput | number
    user?: str_userUpdateOneRequiredWithoutRolesInput
  }

  export type str_role_x_userUncheckedUpdateWithoutRoleInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_user?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by_id?: IntFieldUpdateOperationsInput | number
    updated_by_id?: IntFieldUpdateOperationsInput | number
  }

  export type str_role_x_userUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_user?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by_id?: IntFieldUpdateOperationsInput | number
    updated_by_id?: IntFieldUpdateOperationsInput | number
  }

  export type str_permission_x_roleUpdateWithoutRoleInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by_id?: IntFieldUpdateOperationsInput | number
    updated_by_id?: IntFieldUpdateOperationsInput | number
    permission?: str_permissionUpdateOneRequiredWithoutRolesInput
  }

  export type str_permission_x_roleUncheckedUpdateWithoutRoleInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_permission?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by_id?: IntFieldUpdateOperationsInput | number
    updated_by_id?: IntFieldUpdateOperationsInput | number
  }

  export type str_permission_x_roleUncheckedUpdateManyWithoutPermissionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_permission?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by_id?: IntFieldUpdateOperationsInput | number
    updated_by_id?: IntFieldUpdateOperationsInput | number
  }

  export type str_permission_x_roleCreateManyPermissionInput = {
    id?: number
    id_role: number
    created_at: Date | string
    updated_at: Date | string
    created_by_id: number
    updated_by_id: number
  }

  export type str_permission_x_roleUpdateWithoutPermissionInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by_id?: IntFieldUpdateOperationsInput | number
    updated_by_id?: IntFieldUpdateOperationsInput | number
    role?: str_roleUpdateOneRequiredWithoutPermissionsInput
  }

  export type str_permission_x_roleUncheckedUpdateWithoutPermissionInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_role?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by_id?: IntFieldUpdateOperationsInput | number
    updated_by_id?: IntFieldUpdateOperationsInput | number
  }

  export type str_permission_x_roleUncheckedUpdateManyWithoutRolesInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_role?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    created_by_id?: IntFieldUpdateOperationsInput | number
    updated_by_id?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}